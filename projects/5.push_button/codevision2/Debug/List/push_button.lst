
AVRASM ver. 2.1.30  D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision2\Debug\List\push_button.asm Sat Dec 24 07:27:48 2022

D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision2\Debug\List\push_button.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision2\Debug\List\push_button.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision2\Debug\List\push_button.asm(1089): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 063f
000034 4f5b
000035 6d66
000036 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000037 6f7f      	.DB  0x7F,0x6F
                 _0x2000003:
000038 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000039 000a      	.DW  0x0A
00003a 0260      	.DW  _seg
00003b 0066      	.DW  _0x3*2
                 
00003c 0002      	.DW  0x02
00003d 026a      	.DW  __base_y_G100
00003e 0070      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bff5      	OUT  MCUCR,R31
000045 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 006c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;
                 ;//  #asm
                 ;// .equ __lcd_port = 0x1b; // PORTA
                 ;//  .equ __lcd_port = 0x18; // PORTB
                 ;// .equ __lcd_port = 0x15; // PORTC
                 ;// .equ __lcd_port = 0x12; // PORTD
                 ;// #endasm
                 ;
                 ;unsigned char seg[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66,
                 ;                         0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;
                 ;//! char *decToBinary(int n) {
                 ;//   int binaryNum[8];
                 ;//   int binaryResult = 0;
                 ;//   char *result;
                 ;
                 ;//   int i = 0;
                 ;//   int j = 0;
                 ;//   int digitCounter = 0;
                 ;
                 ;//   while (n > 0) {
                 ;//     binaryNum[i] = n % 2;
                 ;//     n = n / 2;
                 ;//     i++;
                 ;//   }
                 ;
                 ;//   for (j = i - 1; j >= 0; j--)
                 ;//     binaryResult = (binaryResult * 10) + binaryNum[j];
                 ;//   //   printf("%d", binaryNum[j]);
                 ;
                 ;//   while (binaryResult != 0) {
                 ;//     result[7 - digitCounter] = char(binaryResult % 10);
                 ;//     binaryResult /= 10;
                 ;//     digitCounter++;
                 ;//   }
                 ;
                 ;//   while (digitCounter < 8)
                 ;//     result[digitCounter++] = '0';
                 ;
                 ;//   return result;
                 ;//! }
                 ;
                 ;int decToBinary(int n) {
                 ; 0000 002F int decToBinary(int n) {
                 
                 	.CSEG
                 ; 0000 0030   int binaryNum[8];
                 ; 0000 0031   int binaryResult = 0;
                 ; 0000 0032 
                 ; 0000 0033   int x = 0;
                 ; 0000 0034   int j = 0;
                 ; 0000 0035   //   int digitCounter = 0;
                 ; 0000 0036 
                 ; 0000 0037   while (n > 0) {
                 ;	n -> Y+22
                 ;	binaryNum -> Y+6
                 ;	binaryResult -> R16,R17
                 ;	x -> R18,R19
                 ;	j -> R20,R21
                 ; 0000 0038     binaryNum[x] = n % 2;
                 ; 0000 0039     n = n / 2;
                 ; 0000 003A     x++;
                 ; 0000 003B   }
                 ; 0000 003C 
                 ; 0000 003D   for (j = x - 1; j >= 0; j--)
                 ; 0000 003E     binaryResult = (binaryResult * 10) + binaryNum[j];
                 ; 0000 0041 return binaryResult;
                 ; 0000 0042 }
                 ;
                 ;void main(void) {
                 ; 0000 0044 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0045 
                 ; 0000 0046   int i = 0;
                 ; 0000 0047   int j = 0;
                 ; 0000 0048 
                 ; 0000 0049   int temp1 = 0;
                 ; 0000 004A   int temp2 = 0;
                 ; 0000 004B 
                 ; 0000 004C   char decimalNum[16];
                 ; 0000 004D   char binaryNum[16];
                 ; 0000 004E   int binRes;
                 ; 0000 004F   //!   char *binRes;
                 ; 0000 0050 
                 ; 0000 0051   PORTA = 0x00;
00006c 97a4      	SBIW R28,36
00006d e0e0      	LDI  R30,LOW(0)
00006e a3ea      	STD  Y+34,R30
00006f a3eb      	STD  Y+35,R30
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	temp1 -> R20,R21
                 ;	temp2 -> Y+34
                 ;	decimalNum -> Y+18
                 ;	binaryNum -> Y+2
                 ;	binRes -> Y+0
                +
000070 e000     +LDI R16 , LOW ( 0 )
000071 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000072 e020     +LDI R18 , LOW ( 0 )
000073 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000074 e040     +LDI R20 , LOW ( 0 )
000075 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000076 bbeb      	OUT  0x1B,R30
                 ; 0000 0052   DDRA = 0xFF;
000077 efef      	LDI  R30,LOW(255)
000078 bbea      	OUT  0x1A,R30
                 ; 0000 0053 
                 ; 0000 0054   PORTB = 0x00;
000079 e0e0      	LDI  R30,LOW(0)
00007a bbe8      	OUT  0x18,R30
                 ; 0000 0055   DDRB = 0xFF;
00007b efef      	LDI  R30,LOW(255)
00007c bbe7      	OUT  0x17,R30
                 ; 0000 0056 
                 ; 0000 0057   PORTC = 0x00;
00007d e0e0      	LDI  R30,LOW(0)
00007e bbe5      	OUT  0x15,R30
                 ; 0000 0058   DDRC = 0x0F;
00007f e0ef      	LDI  R30,LOW(15)
000080 bbe4      	OUT  0x14,R30
                 ; 0000 0059 
                 ; 0000 005A   PORTD = 0x00;
000081 e0e0      	LDI  R30,LOW(0)
000082 bbe2      	OUT  0x12,R30
                 ; 0000 005B   DDRD = 0xFF;
000083 efef      	LDI  R30,LOW(255)
000084 bbe1      	OUT  0x11,R30
                 ; 0000 005C 
                 ; 0000 005D   lcd_init(16);
000085 e1a0      	LDI  R26,LOW(16)
000086 d072      	RCALL _lcd_init
                 ; 0000 005E 
                 ; 0000 005F   while (1) {
                 _0xA:
                 ; 0000 0060 
                 ; 0000 0061     // if (PINC .7 == 1) {
                 ; 0000 0062     //   PORTC = 2;
                 ; 0000 0063     //   PORTD = seg[temp1];
                 ; 0000 0064     //   delay_ms(5);
                 ; 0000 0065 
                 ; 0000 0066     //   PORTC = 1;
                 ; 0000 0067     //   PORTD = seg[temp2];
                 ; 0000 0068     //   delay_ms(5);
                 ; 0000 0069     // } else {
                 ; 0000 006A     //   PORTC = 0;
                 ; 0000 006B     // }
                 ; 0000 006C 
                 ; 0000 006D     if (PINC .0 == 0 || PINC .1 == 0) {
000087 9b98      	SBIS 0x13,0
000088 c002      	RJMP _0xE
000089 9999      	SBIC 0x13,1
00008a c040      	RJMP _0xD
                 _0xE:
                 ; 0000 006E 
                 ; 0000 006F       if (PINC .0 == 0 && i != 99)
00008b 9998      	SBIC 0x13,0
00008c c005      	RJMP _0x11
00008d e6e3      	LDI  R30,LOW(99)
00008e e0f0      	LDI  R31,HIGH(99)
00008f 17e0      	CP   R30,R16
000090 07f1      	CPC  R31,R17
000091 f409      	BRNE _0x12
                 _0x11:
000092 c003      	RJMP _0x10
                 _0x12:
                 ; 0000 0070         i++;
                +
000093 5f0f     +SUBI R16 , LOW ( - 1 )
000094 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0071       else if (PINC .1 == 0 && i != 0)
000095 c009      	RJMP _0x13
                 _0x10:
000096 9999      	SBIC 0x13,1
000097 c004      	RJMP _0x15
000098 2400      	CLR  R0
000099 1600      	CP   R0,R16
00009a 0601      	CPC  R0,R17
00009b f409      	BRNE _0x16
                 _0x15:
00009c c002      	RJMP _0x14
                 _0x16:
                 ; 0000 0072         i--;
                +
00009d 5001     +SUBI R16 , LOW ( 1 )
00009e 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0073 
                 ; 0000 0074       // lcd_clear();
                 ; 0000 0075       // lcd_gotoxy(4, 0);
                 ; 0000 0076 
                 ; 0000 0077       // (i > 9) ? sprintf(decimalNum, "DEC : %d", i)
                 ; 0000 0078       //         : sprintf(decimalNum, "DEC : 0%d", i);
                 ; 0000 0079 
                 ; 0000 007A       // lcd_puts(decimalNum);
                 ; 0000 007B       // // lcd_putsf("string");
                 ; 0000 007C 
                 ; 0000 007D       // lcd_gotoxy(1, 1);
                 ; 0000 007E       // binRes = decToBinary(i);
                 ; 0000 007F 
                 ; 0000 0080       // sprintf(binaryNum, "BIN : %d", binRes);
                 ; 0000 0081 
                 ; 0000 0082       // //! sprintf(binaryNum, "BIN : %d%d%d%d%d%d%d%d", binRes[0], binRes[1],
                 ; 0000 0083       // //         binRes[2], binRes[3], binRes[4], binRes[5], binRes[6],
                 ; 0000 0084       // //         binRes[7]);
                 ; 0000 0085       // lcd_puts(binaryNum);
                 ; 0000 0086       // delay_ms(50);
                 ; 0000 0087 
                 ; 0000 0088       temp1 = i % 10;
                 _0x14:
                 _0x13:
00009f 01d8      	MOVW R26,R16
0000a0 e0ea      	LDI  R30,LOW(10)
0000a1 e0f0      	LDI  R31,HIGH(10)
0000a2 940e 0159 	CALL __MODW21
0000a4 01af      	MOVW R20,R30
                 ; 0000 0089       temp2 = i / 10;
0000a5 01d8      	MOVW R26,R16
0000a6 e0ea      	LDI  R30,LOW(10)
0000a7 e0f0      	LDI  R31,HIGH(10)
0000a8 940e 0154 	CALL __DIVW21
0000aa a3ea      	STD  Y+34,R30
0000ab a3fb      	STD  Y+34+1,R31
                 ; 0000 008A 
                 ; 0000 008B       for (j = 0; j < 50; j++) {
                +
0000ac e020     +LDI R18 , LOW ( 0 )
0000ad e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x18:
                +
0000ae 3322     +CPI R18 , LOW ( 50 )
0000af e0e0     +LDI R30 , HIGH ( 50 )
0000b0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,50
0000b1 f4cc      	BRGE _0x19
                 ; 0000 008C         PINC .5 = 2;
0000b2 9a9d      	SBI  0x13,5
                 ; 0000 008D         PORTD = seg[temp1];
0000b3 e6a0      	LDI  R26,LOW(_seg)
0000b4 e0b2      	LDI  R27,HIGH(_seg)
0000b5 0fa4      	ADD  R26,R20
0000b6 1fb5      	ADC  R27,R21
0000b7 91ec      	LD   R30,X
0000b8 bbe2      	OUT  0x12,R30
                 ; 0000 008E         delay_ms(5);
0000b9 e0a5      	LDI  R26,LOW(5)
0000ba e0b0      	LDI  R27,0
0000bb 940e 0133 	CALL _delay_ms
                 ; 0000 008F 
                 ; 0000 0090         PINC .4 = 1;
0000bd 9a9c      	SBI  0x13,4
                 ; 0000 0091         PORTD = seg[temp2];
0000be a1ea      	LDD  R30,Y+34
0000bf a1fb      	LDD  R31,Y+34+1
0000c0 5ae0      	SUBI R30,LOW(-_seg)
0000c1 4ffd      	SBCI R31,HIGH(-_seg)
0000c2 81e0      	LD   R30,Z
0000c3 bbe2      	OUT  0x12,R30
                 ; 0000 0092         delay_ms(5);
0000c4 e0a5      	LDI  R26,LOW(5)
0000c5 e0b0      	LDI  R27,0
0000c6 940e 0133 	CALL _delay_ms
                 ; 0000 0093       }
                +
0000c8 5f2f     +SUBI R18 , LOW ( - 1 )
0000c9 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000ca cfe3      	RJMP _0x18
                 _0x19:
                 ; 0000 0094       // if (PINC .7 == 0) {
                 ; 0000 0095       //   PORTC = 0;
                 ; 0000 0096       //   PORTD = i;
                 ; 0000 0097       //   delay_ms(100);
                 ; 0000 0098       // }
                 ; 0000 0099     };
                 _0xD:
                 ; 0000 009A   }
0000cb cfbb      	RJMP _0xA
                 ; 0000 009B }
                 _0x1E:
0000cc cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000cd 93aa      	ST   -Y,R26
0000ce b3e8      	IN   R30,0x18
0000cf 70ef      	ANDI R30,LOW(0xF)
0000d0 2fae      	MOV  R26,R30
0000d1 81e8      	LD   R30,Y
0000d2 7fe0      	ANDI R30,LOW(0xF0)
0000d3 2bea      	OR   R30,R26
0000d4 bbe8      	OUT  0x18,R30
                +
0000d5 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000d6 958a     +DEC R24
0000d7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000d8 9ac2      	SBI  0x18,2
                +
0000d9 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000da 958a     +DEC R24
0000db f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000dc 98c2      	CBI  0x18,2
                +
0000dd e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000de 958a     +DEC R24
0000df f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000e0 c043      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000e1 93aa      	ST   -Y,R26
0000e2 81a8      	LD   R26,Y
0000e3 dfe9      	RCALL __lcd_write_nibble_G100
0000e4 81e8          ld    r30,y
0000e5 95e2          swap  r30
0000e6 83e8          st    y,r30
0000e7 81a8      	LD   R26,Y
0000e8 dfe4      	RCALL __lcd_write_nibble_G100
                +
0000e9 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0000ea 958a     +DEC R24
0000eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0000ec c037      	RJMP _0x2080001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000ed e0a2      	LDI  R26,LOW(2)
0000ee 940e 0126 	CALL SUBOPT_0x0
0000f0 e0ac      	LDI  R26,LOW(12)
0000f1 dfef      	RCALL __lcd_write_data
0000f2 e0a1      	LDI  R26,LOW(1)
0000f3 940e 0126 	CALL SUBOPT_0x0
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 2e4e      	MOV  R4,R30
0000f7 2e5e      	MOV  R5,R30
0000f8 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0000f9 93aa      	ST   -Y,R26
0000fa b3e7      	IN   R30,0x17
0000fb 6fe0      	ORI  R30,LOW(0xF0)
0000fc bbe7      	OUT  0x17,R30
0000fd 9aba      	SBI  0x17,2
0000fe 9ab8      	SBI  0x17,0
0000ff 9ab9      	SBI  0x17,1
000100 98c2      	CBI  0x18,2
000101 98c0      	CBI  0x18,0
000102 98c1      	CBI  0x18,1
000103 8078      	LDD  R7,Y+0
000104 81e8      	LD   R30,Y
000105 58e0      	SUBI R30,-LOW(128)
                +
000106 93e0 026c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000108 81e8      	LD   R30,Y
000109 54e0      	SUBI R30,-LOW(192)
                +
00010a 93e0 026d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00010c e1a4      	LDI  R26,LOW(20)
00010d e0b0      	LDI  R27,0
00010e 940e 0133 	CALL _delay_ms
000110 940e 012c 	CALL SUBOPT_0x1
000112 940e 012c 	CALL SUBOPT_0x1
000114 940e 012c 	CALL SUBOPT_0x1
000116 e2a0      	LDI  R26,LOW(32)
000117 dfb5      	RCALL __lcd_write_nibble_G100
                +
000118 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000119 958a     +DEC R24
00011a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00011b e2a8      	LDI  R26,LOW(40)
00011c dfc4      	RCALL __lcd_write_data
00011d e0a4      	LDI  R26,LOW(4)
00011e dfc2      	RCALL __lcd_write_data
00011f e8a5      	LDI  R26,LOW(133)
000120 dfc0      	RCALL __lcd_write_data
000121 e0a6      	LDI  R26,LOW(6)
000122 dfbe      	RCALL __lcd_write_data
000123 dfc9      	RCALL _lcd_clear
                 _0x2080001:
000124 9621      	ADIW R28,1
000125 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _seg:
000260           	.BYTE 0xA
                 __base_y_G100:
00026a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000126 940e 00e1 	CALL __lcd_write_data
000128 e0a3      	LDI  R26,LOW(3)
000129 e0b0      	LDI  R27,0
00012a 940c 0133 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00012c e3a0      	LDI  R26,LOW(48)
00012d 940e 00cd 	CALL __lcd_write_nibble_G100
                +
00012f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000130 958a     +DEC R24
000131 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000132 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000133 9610      	adiw r26,0
000134 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000135 ef8a     +LDI R24 , LOW ( 0xFA )
000136 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000137 9701     +SBIW R24 , 1
000138 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000139 95a8      	wdr
00013a 9711      	sbiw r26,1
00013b f7c9      	brne __delay_ms0
                 __delay_ms1:
00013c 9508      	ret
                 
                 __ANEGW1:
00013d 95f1      	NEG  R31
00013e 95e1      	NEG  R30
00013f 40f0      	SBCI R31,0
000140 9508      	RET
                 
                 __DIVW21U:
000141 2400      	CLR  R0
000142 2411      	CLR  R1
000143 e190      	LDI  R25,16
                 __DIVW21U1:
000144 0faa      	LSL  R26
000145 1fbb      	ROL  R27
000146 1c00      	ROL  R0
000147 1c11      	ROL  R1
000148 1a0e      	SUB  R0,R30
000149 0a1f      	SBC  R1,R31
00014a f418      	BRCC __DIVW21U2
00014b 0e0e      	ADD  R0,R30
00014c 1e1f      	ADC  R1,R31
00014d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00014e 60a1      	SBR  R26,1
                 __DIVW21U3:
00014f 959a      	DEC  R25
000150 f799      	BRNE __DIVW21U1
000151 01fd      	MOVW R30,R26
000152 01d0      	MOVW R26,R0
000153 9508      	RET
                 
                 __DIVW21:
000154 d012      	RCALL __CHKSIGNW
000155 dfeb      	RCALL __DIVW21U
000156 f40e      	BRTC __DIVW211
000157 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000158 9508      	RET
                 
                 __MODW21:
000159 94e8      	CLT
00015a ffb7      	SBRS R27,7
00015b c004      	RJMP __MODW211
00015c 95a0      	COM  R26
00015d 95b0      	COM  R27
00015e 9611      	ADIW R26,1
00015f 9468      	SET
                 __MODW211:
000160 fdf7      	SBRC R31,7
000161 dfdb      	RCALL __ANEGW1
000162 dfde      	RCALL __DIVW21U
000163 01fd      	MOVW R30,R26
000164 f40e      	BRTC __MODW212
000165 dfd7      	RCALL __ANEGW1
                 __MODW212:
000166 9508      	RET
                 
                 __CHKSIGNW:
000167 94e8      	CLT
000168 fff7      	SBRS R31,7
000169 c002      	RJMP __CHKSW1
00016a dfd2      	RCALL __ANEGW1
00016b 9468      	SET
                 __CHKSW1:
00016c ffb7      	SBRS R27,7
00016d c006      	RJMP __CHKSW2
00016e 95a0      	COM  R26
00016f 95b0      	COM  R27
000170 9611      	ADIW R26,1
000171 f800      	BLD  R0,0
000172 9403      	INC  R0
000173 fa00      	BST  R0,0
                 __CHKSW2:
000174 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   5 r18:   4 r19:   4 r20:   3 r21:   2 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  39 r27:  13 r28:   3 r29:   1 r30:  72 r31:  16 
x  :   4 y  :  17 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  12 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   2 cpc   :   3 cpi   :   1 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  23 ld    :   8 ldd   :   3 ldi   :  65 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   3 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  17 pop   :   0 push  :   0 rcall :  17 ret   :   9 
reti  :   0 rjmp  :  17 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   6 sbic  :   3 sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   7 std   :   4 sts   :   2 sub   :   1 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ea    702     44    746   32768   2.3%
[.dseg] 0x000060 0x00026e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
