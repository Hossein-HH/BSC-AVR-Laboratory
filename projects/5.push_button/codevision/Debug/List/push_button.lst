
AVRASM ver. 2.1.30  D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision\Debug\List\push_button.asm Wed Dec 28 19:41:20 2022

D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision\Debug\List\push_button.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision\Debug\List\push_button.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\5.push_button\codevision\Debug\List\push_button.asm(1089): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 063f
000034 4f5b
000035 6d66
000036 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000037 6f7f      	.DB  0x7F,0x6F
                 _0x0:
000038 4544
000039 2043
00003a 203a
00003b 6425      	.DB  0x44,0x45,0x43,0x20,0x3A,0x20,0x25,0x64
00003c 4400
00003d 4345
00003e 3a20
00003f 3020      	.DB  0x0,0x44,0x45,0x43,0x20,0x3A,0x20,0x30
000040 6425
000041 4200
000042 4e49
000043 3a20      	.DB  0x25,0x64,0x0,0x42,0x49,0x4E,0x20,0x3A
000044 2520
000045 0064      	.DB  0x20,0x25,0x64,0x0
                 _0x2000003:
000046 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000047 000a      	.DW  0x0A
000048 0260      	.DW  _seg
000049 0066      	.DW  _0x3*2
                 
00004a 0002      	.DW  0x02
00004b 026a      	.DW  __base_y_G100
00004c 008c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bff5      	OUT  MCUCR,R31
000053 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000054 e08d      	LDI  R24,(14-2)+1
000055 e0a2      	LDI  R26,2
000056 27bb      	CLR  R27
                 __CLEAR_REG:
000057 93ed      	ST   X+,R30
000058 958a      	DEC  R24
000059 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000072 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000073 bfed      	OUT  SPL,R30
000074 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000077 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000078 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;
                 ;unsigned char seg[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66,
                 ;                         0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;
                 ;int decToBinary(int n) {
                 ; 0000 0009 int decToBinary(int n) {
                 
                 	.CSEG
                 _decToBinary:
                 ; .FSTART _decToBinary
                 ; 0000 000A   int binaryNum[8];
                 ; 0000 000B   int binaryResult = 0;
                 ; 0000 000C 
                 ; 0000 000D   int x = 0;
                 ; 0000 000E   int j = 0;
                 ; 0000 000F   //   int digitCounter = 0;
                 ; 0000 0010 
                 ; 0000 0011   while (n > 0) {
00007a 93ba      	ST   -Y,R27
00007b 93aa      	ST   -Y,R26
00007c 9760      	SBIW R28,16
00007d 940e 046c 	CALL __SAVELOCR6
                 ;	n -> Y+22
                 ;	binaryNum -> Y+6
                 ;	binaryResult -> R16,R17
                 ;	x -> R18,R19
                 ;	j -> R20,R21
00007f 940e 0398 	CALL SUBOPT_0x0
                 _0x4:
000081 89ae      	LDD  R26,Y+22
000082 89bf      	LDD  R27,Y+22+1
000083 940e 0468 	CALL __CPW02
000085 f4e4      	BRGE _0x6
                 ; 0000 0012     binaryNum[x] = n % 2;
000086 01f9      	MOVW R30,R18
000087 01de      	MOVW R26,R28
000088 9616      	ADIW R26,6
000089 0fee      	LSL  R30
00008a 1fff      	ROL  R31
00008b 0fea      	ADD  R30,R26
00008c 1ffb      	ADC  R31,R27
00008d 010f      	MOVW R0,R30
00008e 89ee      	LDD  R30,Y+22
00008f 89ff      	LDD  R31,Y+22+1
000090 e0a1      	LDI  R26,LOW(1)
000091 e0b0      	LDI  R27,HIGH(1)
000092 940e 0443 	CALL __MANDW12
000094 01d0      	MOVW R26,R0
000095 93ed      	ST   X+,R30
000096 93fc      	ST   X,R31
                 ; 0000 0013     n = n / 2;
000097 89ae      	LDD  R26,Y+22
000098 89bf      	LDD  R27,Y+22+1
000099 e0e2      	LDI  R30,LOW(2)
00009a e0f0      	LDI  R31,HIGH(2)
00009b 940e 0430 	CALL __DIVW21
00009d 8bee      	STD  Y+22,R30
00009e 8bff      	STD  Y+22+1,R31
                 ; 0000 0014     x++;
                +
00009f 5f2f     +SUBI R18 , LOW ( - 1 )
0000a0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0015   }
0000a1 cfdf      	RJMP _0x4
                 _0x6:
                 ; 0000 0016 
                 ; 0000 0017   for (j = x - 1; j >= 0; j--)
0000a2 01f9      	MOVW R30,R18
0000a3 9731      	SBIW R30,1
0000a4 01af      	MOVW R20,R30
                 _0x8:
0000a5 2355      	TST  R21
0000a6 f0aa      	BRMI _0x9
                 ; 0000 0018     binaryResult = (binaryResult * 10) + binaryNum[j];
0000a7 01f8      	MOVW R30,R16
0000a8 e0aa      	LDI  R26,LOW(10)
0000a9 e0b0      	LDI  R27,HIGH(10)
0000aa 940e 0418 	CALL __MULW12
0000ac 010f      	MOVW R0,R30
0000ad 01fa      	MOVW R30,R20
0000ae 01de      	MOVW R26,R28
0000af 9616      	ADIW R26,6
0000b0 0fee      	LSL  R30
0000b1 1fff      	ROL  R31
0000b2 0fae      	ADD  R26,R30
0000b3 1fbf      	ADC  R27,R31
0000b4 940e 045b 	CALL __GETW1P
0000b6 0de0      	ADD  R30,R0
0000b7 1df1      	ADC  R31,R1
0000b8 018f      	MOVW R16,R30
                +
0000b9 5041     +SUBI R20 , LOW ( 1 )
0000ba 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
0000bb cfe9      	RJMP _0x8
                 _0x9:
                 ; 0000 001B return binaryResult;
0000bc 01f8      	MOVW R30,R16
0000bd 940e 0473 	CALL __LOADLOCR6
0000bf 9668      	ADIW R28,24
0000c0 9508      	RET
                 ; 0000 001C }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 001E void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 001F 
                 ; 0000 0020   int i = 0;
                 ; 0000 0021   int j = 0;
                 ; 0000 0022 
                 ; 0000 0023   int temp1 = 0;
                 ; 0000 0024   int temp2 = 0;
                 ; 0000 0025 
                 ; 0000 0026   char decimalNum[16];
                 ; 0000 0027   char binaryNum[16];
                 ; 0000 0028   int binRes;
                 ; 0000 0029 
                 ; 0000 002A   PORTA = 0x00;
0000c1 97a4      	SBIW R28,36
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 a3ea      	STD  Y+34,R30
0000c4 a3eb      	STD  Y+35,R30
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	temp1 -> R20,R21
                 ;	temp2 -> Y+34
                 ;	decimalNum -> Y+18
                 ;	binaryNum -> Y+2
                 ;	binRes -> Y+0
0000c5 940e 0398 	CALL SUBOPT_0x0
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bbeb      	OUT  0x1B,R30
                 ; 0000 002B   DDRA = 0xFF;
0000c9 efef      	LDI  R30,LOW(255)
0000ca bbea      	OUT  0x1A,R30
                 ; 0000 002C 
                 ; 0000 002D   PORTB = 0x00;
0000cb e0e0      	LDI  R30,LOW(0)
0000cc bbe8      	OUT  0x18,R30
                 ; 0000 002E   DDRB = 0xFF;
0000cd efef      	LDI  R30,LOW(255)
0000ce bbe7      	OUT  0x17,R30
                 ; 0000 002F 
                 ; 0000 0030   PORTC = 0x00;
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bbe5      	OUT  0x15,R30
                 ; 0000 0031   DDRC = 0xF0;
0000d1 efe0      	LDI  R30,LOW(240)
0000d2 bbe4      	OUT  0x14,R30
                 ; 0000 0032 
                 ; 0000 0033   PORTD = 0x00;
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 bbe2      	OUT  0x12,R30
                 ; 0000 0034   DDRD = 0xFF;
0000d5 efef      	LDI  R30,LOW(255)
0000d6 bbe1      	OUT  0x11,R30
                 ; 0000 0035 
                 ; 0000 0036   lcd_init(16);
0000d7 e1a0      	LDI  R26,LOW(16)
0000d8 d0d1      	RCALL _lcd_init
                 ; 0000 0037 
                 ; 0000 0038   while (1) {
                 _0xA:
                 ; 0000 0039     PINC .4 = 0;
0000d9 940e 039f 	CALL SUBOPT_0x1
                 ; 0000 003A     PINC .4 = 1;
                 ; 0000 003B     PORTA = seg[temp1];
                 ; 0000 003C     delay_ms(5);
                 ; 0000 003D 
                 ; 0000 003E     PINC .5 = 0;
                 ; 0000 003F     PINC .5 = 1;
                 ; 0000 0040     PORTA = seg[temp2];
                 ; 0000 0041     delay_ms(5);
                 ; 0000 0042 
                 ; 0000 0043     if (PINC .0 == 0 || PINC .1 == 0) {
0000db 9b98      	SBIS 0x13,0
0000dc c002      	RJMP _0x16
0000dd 9999      	SBIC 0x13,1
0000de c06a      	RJMP _0x15
                 _0x16:
                 ; 0000 0044 
                 ; 0000 0045       if (PINC .0 == 0 && i != 99)
0000df 9998      	SBIC 0x13,0
0000e0 c005      	RJMP _0x19
0000e1 e6e3      	LDI  R30,LOW(99)
0000e2 e0f0      	LDI  R31,HIGH(99)
0000e3 17e0      	CP   R30,R16
0000e4 07f1      	CPC  R31,R17
0000e5 f409      	BRNE _0x1A
                 _0x19:
0000e6 c003      	RJMP _0x18
                 _0x1A:
                 ; 0000 0046         i++;
                +
0000e7 5f0f     +SUBI R16 , LOW ( - 1 )
0000e8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0047       else if (PINC .1 == 0 && i != 0)
0000e9 c009      	RJMP _0x1B
                 _0x18:
0000ea 9999      	SBIC 0x13,1
0000eb c004      	RJMP _0x1D
0000ec 2400      	CLR  R0
0000ed 1600      	CP   R0,R16
0000ee 0601      	CPC  R0,R17
0000ef f409      	BRNE _0x1E
                 _0x1D:
0000f0 c002      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0048         i--;
                +
0000f1 5001     +SUBI R16 , LOW ( 1 )
0000f2 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0049 
                 ; 0000 004A       lcd_clear();
                 _0x1C:
                 _0x1B:
0000f3 d084      	RCALL _lcd_clear
                 ; 0000 004B       lcd_gotoxy(4, 0);
0000f4 e0e4      	LDI  R30,LOW(4)
0000f5 93ea      	ST   -Y,R30
0000f6 e0a0      	LDI  R26,LOW(0)
0000f7 d073      	RCALL _lcd_gotoxy
                 ; 0000 004C 
                 ; 0000 004D       (i > 9) ? sprintf(decimalNum, "DEC : %d", i)
                 ; 0000 004E               : sprintf(decimalNum, "DEC : 0%d", i);
                +
0000f8 300a     +CPI R16 , LOW ( 10 )
0000f9 e0e0     +LDI R30 , HIGH ( 10 )
0000fa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000fb f03c      	BRLT _0x1F
0000fc 01fe      	MOVW R30,R28
0000fd 9672      	ADIW R30,18
0000fe 93fa      	ST   -Y,R31
0000ff 93ea      	ST   -Y,R30
                +
000100 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000101 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000102 c006      	RJMP _0x2E
                 _0x1F:
000103 01fe      	MOVW R30,R28
000104 9672      	ADIW R30,18
000105 93fa      	ST   -Y,R31
000106 93ea      	ST   -Y,R30
                +
000107 e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
000108 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
                 _0x2E:
000109 93fa      	ST   -Y,R31
00010a 93ea      	ST   -Y,R30
00010b 01f8      	MOVW R30,R16
00010c 940e 03b7 	CALL SUBOPT_0x2
                 ; 0000 004F 
                 ; 0000 0050       lcd_puts(decimalNum);
00010e 01de      	MOVW R26,R28
00010f 9652      	ADIW R26,18
000110 d088      	RCALL _lcd_puts
                 ; 0000 0051 
                 ; 0000 0052       lcd_gotoxy(1, 1);
000111 e0e1      	LDI  R30,LOW(1)
000112 93ea      	ST   -Y,R30
000113 e0a1      	LDI  R26,LOW(1)
000114 d056      	RCALL _lcd_gotoxy
                 ; 0000 0053       binRes = decToBinary(i);
000115 01d8      	MOVW R26,R16
000116 df63      	RCALL _decToBinary
000117 83e8      	ST   Y,R30
000118 83f9      	STD  Y+1,R31
                 ; 0000 0054 
                 ; 0000 0055       sprintf(binaryNum, "BIN : %d", binRes);
000119 01fe      	MOVW R30,R28
00011a 9632      	ADIW R30,2
00011b 93fa      	ST   -Y,R31
00011c 93ea      	ST   -Y,R30
                +
00011d e8e3     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
00011e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
00011f 93fa      	ST   -Y,R31
000120 93ea      	ST   -Y,R30
000121 81ec      	LDD  R30,Y+4
000122 81fd      	LDD  R31,Y+4+1
000123 940e 03b7 	CALL SUBOPT_0x2
                 ; 0000 0056 
                 ; 0000 0057       lcd_puts(binaryNum);
000125 01de      	MOVW R26,R28
000126 9612      	ADIW R26,2
000127 d071      	RCALL _lcd_puts
                 ; 0000 0058       delay_ms(50);
000128 e3a2      	LDI  R26,LOW(50)
000129 e0b0      	LDI  R27,0
00012a 940e 03f9 	CALL _delay_ms
                 ; 0000 0059 
                 ; 0000 005A       temp1 = i % 10;
00012c 01d8      	MOVW R26,R16
00012d e0ea      	LDI  R30,LOW(10)
00012e e0f0      	LDI  R31,HIGH(10)
00012f 940e 0435 	CALL __MODW21
000131 01af      	MOVW R20,R30
                 ; 0000 005B       temp2 = i / 10;
000132 01d8      	MOVW R26,R16
000133 e0ea      	LDI  R30,LOW(10)
000134 e0f0      	LDI  R31,HIGH(10)
000135 940e 0430 	CALL __DIVW21
000137 a3ea      	STD  Y+34,R30
000138 a3fb      	STD  Y+34+1,R31
                 ; 0000 005C 
                 ; 0000 005D       for (j = 0; j < 50; j++) {
                +
000139 e020     +LDI R18 , LOW ( 0 )
00013a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x23:
                +
00013b 3322     +CPI R18 , LOW ( 50 )
00013c e0e0     +LDI R30 , HIGH ( 50 )
00013d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,50
00013e f42c      	BRGE _0x24
                 ; 0000 005E         PINC .4 = 0;
00013f 940e 039f 	CALL SUBOPT_0x1
                 ; 0000 005F         PINC .4 = 1;
                 ; 0000 0060         PORTA = seg[temp1];
                 ; 0000 0061         delay_ms(5);
                 ; 0000 0062 
                 ; 0000 0063         PINC .5 = 0;
                 ; 0000 0064         PINC .5 = 1;
                 ; 0000 0065         PORTA = seg[temp2];
                 ; 0000 0066         delay_ms(5);
                 ; 0000 0067       }
                +
000141 5f2f     +SUBI R18 , LOW ( - 1 )
000142 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000143 cff7      	RJMP _0x23
                 _0x24:
                 ; 0000 0068 
                 ; 0000 0069       PORTD = i;
000144 bb02      	OUT  0x12,R16
                 ; 0000 006A       delay_ms(5);
000145 e0a5      	LDI  R26,LOW(5)
000146 e0b0      	LDI  R27,0
000147 940e 03f9 	CALL _delay_ms
                 ; 0000 006B     };
                 _0x15:
                 ; 0000 006C   }
000149 cf8f      	RJMP _0xA
                 ; 0000 006D }
                 _0x2D:
00014a cfff      	RJMP _0x2D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00014b 93aa      	ST   -Y,R26
00014c b3e8      	IN   R30,0x18
00014d 70ef      	ANDI R30,LOW(0xF)
00014e 2fae      	MOV  R26,R30
00014f 81e8      	LD   R30,Y
000150 7fe0      	ANDI R30,LOW(0xF0)
000151 2bea      	OR   R30,R26
000152 bbe8      	OUT  0x18,R30
                +
000153 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000154 958a     +DEC R24
000155 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000156 9ac2      	SBI  0x18,2
                +
000157 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000158 958a     +DEC R24
000159 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00015a 98c2      	CBI  0x18,2
                +
00015b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00015c 958a     +DEC R24
00015d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00015e c076      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00015f 93aa      	ST   -Y,R26
000160 81a8      	LD   R26,Y
000161 dfe9      	RCALL __lcd_write_nibble_G100
000162 81e8          ld    r30,y
000163 95e2          swap  r30
000164 83e8          st    y,r30
000165 81a8      	LD   R26,Y
000166 dfe4      	RCALL __lcd_write_nibble_G100
                +
000167 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000168 958a     +DEC R24
000169 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00016a c06a      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00016b 93aa      	ST   -Y,R26
00016c 81e8      	LD   R30,Y
00016d e0f0      	LDI  R31,0
00016e 59e6      	SUBI R30,LOW(-__base_y_G100)
00016f 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000170 81e0      	LD   R30,Z
000171 81a9      	LDD  R26,Y+1
000172 0fae      	ADD  R26,R30
000173 dfeb      	RCALL __lcd_write_data
000174 8059      	LDD  R5,Y+1
000175 8048      	LDD  R4,Y+0
000176 9622      	ADIW R28,2
000177 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000178 e0a2      	LDI  R26,LOW(2)
000179 940e 03c0 	CALL SUBOPT_0x3
00017b e0ac      	LDI  R26,LOW(12)
00017c dfe2      	RCALL __lcd_write_data
00017d e0a1      	LDI  R26,LOW(1)
00017e 940e 03c0 	CALL SUBOPT_0x3
000180 e0e0      	LDI  R30,LOW(0)
000181 2e4e      	MOV  R4,R30
000182 2e5e      	MOV  R5,R30
000183 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000184 93aa      	ST   -Y,R26
000185 81a8      	LD   R26,Y
000186 30aa      	CPI  R26,LOW(0xA)
000187 f011      	BREQ _0x2000005
000188 1457      	CP   R5,R7
000189 f048      	BRLO _0x2000004
                 _0x2000005:
00018a e0e0      	LDI  R30,LOW(0)
00018b 93ea      	ST   -Y,R30
00018c 9443      	INC  R4
00018d 2da4      	MOV  R26,R4
00018e dfdc      	RCALL _lcd_gotoxy
00018f 81a8      	LD   R26,Y
000190 30aa      	CPI  R26,LOW(0xA)
000191 f409      	BRNE _0x2000007
000192 c042      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000193 9453      	INC  R5
000194 9ac0      	SBI  0x18,0
000195 81a8      	LD   R26,Y
000196 dfc8      	RCALL __lcd_write_data
000197 98c0      	CBI  0x18,0
000198 c03c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000199 93ba      	ST   -Y,R27
00019a 93aa      	ST   -Y,R26
00019b 931a      	ST   -Y,R17
                 _0x2000008:
00019c 81a9      	LDD  R26,Y+1
00019d 81ba      	LDD  R27,Y+1+1
00019e 91ed      	LD   R30,X+
00019f 83a9      	STD  Y+1,R26
0001a0 83ba      	STD  Y+1+1,R27
0001a1 2f1e      	MOV  R17,R30
0001a2 30e0      	CPI  R30,0
0001a3 f019      	BREQ _0x200000A
0001a4 2fa1      	MOV  R26,R17
0001a5 dfde      	RCALL _lcd_putchar
0001a6 cff5      	RJMP _0x2000008
                 _0x200000A:
0001a7 8118      	LDD  R17,Y+0
0001a8 9623      	ADIW R28,3
0001a9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001aa 93aa      	ST   -Y,R26
0001ab b3e7      	IN   R30,0x17
0001ac 6fe0      	ORI  R30,LOW(0xF0)
0001ad bbe7      	OUT  0x17,R30
0001ae 9aba      	SBI  0x17,2
0001af 9ab8      	SBI  0x17,0
0001b0 9ab9      	SBI  0x17,1
0001b1 98c2      	CBI  0x18,2
0001b2 98c0      	CBI  0x18,0
0001b3 98c1      	CBI  0x18,1
0001b4 8078      	LDD  R7,Y+0
0001b5 81e8      	LD   R30,Y
0001b6 58e0      	SUBI R30,-LOW(128)
                +
0001b7 93e0 026c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001b9 81e8      	LD   R30,Y
0001ba 54e0      	SUBI R30,-LOW(192)
                +
0001bb 93e0 026d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001bd e1a4      	LDI  R26,LOW(20)
0001be e0b0      	LDI  R27,0
0001bf 940e 03f9 	CALL _delay_ms
0001c1 940e 03c6 	CALL SUBOPT_0x4
0001c3 940e 03c6 	CALL SUBOPT_0x4
0001c5 940e 03c6 	CALL SUBOPT_0x4
0001c7 e2a0      	LDI  R26,LOW(32)
0001c8 df82      	RCALL __lcd_write_nibble_G100
                +
0001c9 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ca 958a     +DEC R24
0001cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001cc e2a8      	LDI  R26,LOW(40)
0001cd df91      	RCALL __lcd_write_data
0001ce e0a4      	LDI  R26,LOW(4)
0001cf df8f      	RCALL __lcd_write_data
0001d0 e8a5      	LDI  R26,LOW(133)
0001d1 df8d      	RCALL __lcd_write_data
0001d2 e0a6      	LDI  R26,LOW(6)
0001d3 df8b      	RCALL __lcd_write_data
0001d4 dfa3      	RCALL _lcd_clear
                 _0x2080002:
0001d5 9621      	ADIW R28,1
0001d6 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001d7 93ba      	ST   -Y,R27
0001d8 93aa      	ST   -Y,R26
0001d9 931a      	ST   -Y,R17
0001da 930a      	ST   -Y,R16
0001db 81aa      	LDD  R26,Y+2
0001dc 81bb      	LDD  R27,Y+2+1
0001dd 9612      	ADIW R26,2
0001de 940e 045b 	CALL __GETW1P
0001e0 9730      	SBIW R30,0
0001e1 f159      	BREQ _0x2020010
0001e2 81aa      	LDD  R26,Y+2
0001e3 81bb      	LDD  R27,Y+2+1
0001e4 9614      	ADIW R26,4
0001e5 940e 045b 	CALL __GETW1P
0001e7 018f      	MOVW R16,R30
0001e8 9730      	SBIW R30,0
0001e9 f061      	BREQ _0x2020012
                +
0001ea 3002     +CPI R16 , LOW ( 2 )
0001eb e0e0     +LDI R30 , HIGH ( 2 )
0001ec 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001ed f098      	BRLO _0x2020013
0001ee 01f8      	MOVW R30,R16
0001ef 9731      	SBIW R30,1
0001f0 018f      	MOVW R16,R30
                +
0001f1 81aa     +LDD R26 , Y + 2
0001f2 81bb     +LDD R27 , Y + 2 + 1
0001f3 9614     +ADIW R26 , 4
0001f4 93ed     +ST X + , R30
0001f5 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001f6 81aa      	LDD  R26,Y+2
0001f7 81bb      	LDD  R27,Y+2+1
0001f8 9612      	ADIW R26,2
0001f9 91ed      	LD   R30,X+
0001fa 91fd      	LD   R31,X+
0001fb 9631      	ADIW R30,1
0001fc 93fe      	ST   -X,R31
0001fd 93ee      	ST   -X,R30
0001fe 9731      	SBIW R30,1
0001ff 81ac      	LDD  R26,Y+4
000200 83a0      	STD  Z+0,R26
                 _0x2020013:
000201 81aa      	LDD  R26,Y+2
000202 81bb      	LDD  R27,Y+2+1
000203 940e 045b 	CALL __GETW1P
000205 23ff      	TST  R31
000206 f02a      	BRMI _0x2020014
000207 91ed      	LD   R30,X+
000208 91fd      	LD   R31,X+
000209 9631      	ADIW R30,1
00020a 93fe      	ST   -X,R31
00020b 93ee      	ST   -X,R30
                 _0x2020014:
00020c c006      	RJMP _0x2020015
                 _0x2020010:
00020d 81aa      	LDD  R26,Y+2
00020e 81bb      	LDD  R27,Y+2+1
00020f efef      	LDI  R30,LOW(65535)
000210 efff      	LDI  R31,HIGH(65535)
000211 93ed      	ST   X+,R30
000212 93fc      	ST   X,R31
                 _0x2020015:
000213 8119      	LDD  R17,Y+1
000214 8108      	LDD  R16,Y+0
000215 9625      	ADIW R28,5
000216 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000217 93ba      	ST   -Y,R27
000218 93aa      	ST   -Y,R26
000219 9726      	SBIW R28,6
00021a 940e 046c 	CALL __SAVELOCR6
00021c e010      	LDI  R17,0
00021d 85ac      	LDD  R26,Y+12
00021e 85bd      	LDD  R27,Y+12+1
00021f e0e0      	LDI  R30,LOW(0)
000220 e0f0      	LDI  R31,HIGH(0)
000221 93ed      	ST   X+,R30
000222 93fc      	ST   X,R31
                 _0x2020016:
000223 89ea      	LDD  R30,Y+18
000224 89fb      	LDD  R31,Y+18+1
000225 9631      	ADIW R30,1
000226 8bea      	STD  Y+18,R30
000227 8bfb      	STD  Y+18+1,R31
000228 9731      	SBIW R30,1
000229 91e4      	LPM  R30,Z
00022a 2f2e      	MOV  R18,R30
00022b 30e0      	CPI  R30,0
00022c f409      	BRNE PC+2
00022d c115      	RJMP _0x2020018
00022e 2fe1      	MOV  R30,R17
00022f 30e0      	CPI  R30,0
000230 f439      	BRNE _0x202001C
000231 3225      	CPI  R18,37
000232 f411      	BRNE _0x202001D
000233 e011      	LDI  R17,LOW(1)
000234 c002      	RJMP _0x202001E
                 _0x202001D:
000235 940e 03cd 	CALL SUBOPT_0x5
                 _0x202001E:
000237 c10a      	RJMP _0x202001B
                 _0x202001C:
000238 30e1      	CPI  R30,LOW(0x1)
000239 f4a9      	BRNE _0x202001F
00023a 3225      	CPI  R18,37
00023b f419      	BRNE _0x2020020
00023c 940e 03cd 	CALL SUBOPT_0x5
00023e c102      	RJMP _0x20200CC
                 _0x2020020:
00023f e012      	LDI  R17,LOW(2)
000240 e040      	LDI  R20,LOW(0)
000241 e000      	LDI  R16,LOW(0)
000242 322d      	CPI  R18,45
000243 f411      	BRNE _0x2020021
000244 e001      	LDI  R16,LOW(1)
000245 c0fc      	RJMP _0x202001B
                 _0x2020021:
000246 322b      	CPI  R18,43
000247 f411      	BRNE _0x2020022
000248 e24b      	LDI  R20,LOW(43)
000249 c0f8      	RJMP _0x202001B
                 _0x2020022:
00024a 3220      	CPI  R18,32
00024b f411      	BRNE _0x2020023
00024c e240      	LDI  R20,LOW(32)
00024d c0f4      	RJMP _0x202001B
                 _0x2020023:
00024e c002      	RJMP _0x2020024
                 _0x202001F:
00024f 30e2      	CPI  R30,LOW(0x2)
000250 f439      	BRNE _0x2020025
                 _0x2020024:
000251 e050      	LDI  R21,LOW(0)
000252 e013      	LDI  R17,LOW(3)
000253 3320      	CPI  R18,48
000254 f411      	BRNE _0x2020026
000255 6800      	ORI  R16,LOW(128)
000256 c0eb      	RJMP _0x202001B
                 _0x2020026:
000257 c003      	RJMP _0x2020027
                 _0x2020025:
000258 30e3      	CPI  R30,LOW(0x3)
000259 f009      	BREQ PC+2
00025a c0e7      	RJMP _0x202001B
                 _0x2020027:
00025b 3320      	CPI  R18,48
00025c f010      	BRLO _0x202002A
00025d 332a      	CPI  R18,58
00025e f008      	BRLO _0x202002B
                 _0x202002A:
00025f c007      	RJMP _0x2020029
                 _0x202002B:
000260 e0aa      	LDI  R26,LOW(10)
000261 9f5a      	MUL  R21,R26
000262 2d50      	MOV  R21,R0
000263 2fe2      	MOV  R30,R18
000264 53e0      	SUBI R30,LOW(48)
000265 0f5e      	ADD  R21,R30
000266 c0db      	RJMP _0x202001B
                 _0x2020029:
000267 2fe2      	MOV  R30,R18
000268 36e3      	CPI  R30,LOW(0x63)
000269 f449      	BRNE _0x202002F
00026a 940e 03d4 	CALL SUBOPT_0x6
00026c 89e8      	LDD  R30,Y+16
00026d 89f9      	LDD  R31,Y+16+1
00026e 81a4      	LDD  R26,Z+4
00026f 93aa      	ST   -Y,R26
000270 940e 03da 	CALL SUBOPT_0x7
000272 c0ce      	RJMP _0x2020030
                 _0x202002F:
000273 37e3      	CPI  R30,LOW(0x73)
000274 f441      	BRNE _0x2020032
000275 940e 03d4 	CALL SUBOPT_0x6
000277 940e 03e0 	CALL SUBOPT_0x8
000279 940e 037f 	CALL _strlen
00027b 2f1e      	MOV  R17,R30
00027c c00a      	RJMP _0x2020033
                 _0x2020032:
00027d 37e0      	CPI  R30,LOW(0x70)
00027e f461      	BRNE _0x2020035
00027f 940e 03d4 	CALL SUBOPT_0x6
000281 940e 03e0 	CALL SUBOPT_0x8
000283 940e 038b 	CALL _strlenf
000285 2f1e      	MOV  R17,R30
000286 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000287 6002      	ORI  R16,LOW(2)
000288 770f      	ANDI R16,LOW(127)
000289 e030      	LDI  R19,LOW(0)
00028a c034      	RJMP _0x2020036
                 _0x2020035:
00028b 36e4      	CPI  R30,LOW(0x64)
00028c f011      	BREQ _0x2020039
00028d 36e9      	CPI  R30,LOW(0x69)
00028e f411      	BRNE _0x202003A
                 _0x2020039:
00028f 6004      	ORI  R16,LOW(4)
000290 c002      	RJMP _0x202003B
                 _0x202003A:
000291 37e5      	CPI  R30,LOW(0x75)
000292 f431      	BRNE _0x202003C
                 _0x202003B:
000293 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000294 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000295 83ee      	STD  Y+6,R30
000296 83ff      	STD  Y+6+1,R31
000297 e015      	LDI  R17,LOW(5)
000298 c00c      	RJMP _0x202003D
                 _0x202003C:
000299 35e8      	CPI  R30,LOW(0x58)
00029a f411      	BRNE _0x202003F
00029b 6008      	ORI  R16,LOW(8)
00029c c003      	RJMP _0x2020040
                 _0x202003F:
00029d 37e8      	CPI  R30,LOW(0x78)
00029e f009      	BREQ PC+2
00029f c0a1      	RJMP _0x2020071
                 _0x2020040:
0002a0 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002a1 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002a2 83ee      	STD  Y+6,R30
0002a3 83ff      	STD  Y+6+1,R31
0002a4 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002a5 ff02      	SBRS R16,2
0002a6 c014      	RJMP _0x2020042
0002a7 940e 03d4 	CALL SUBOPT_0x6
0002a9 940e 03ea 	CALL SUBOPT_0x9
0002ab 85ab      	LDD  R26,Y+11
0002ac 23aa      	TST  R26
0002ad f43a      	BRPL _0x2020043
0002ae 85ea      	LDD  R30,Y+10
0002af 85fb      	LDD  R31,Y+10+1
0002b0 940e 0407 	CALL __ANEGW1
0002b2 87ea      	STD  Y+10,R30
0002b3 87fb      	STD  Y+10+1,R31
0002b4 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002b5 3040      	CPI  R20,0
0002b6 f011      	BREQ _0x2020044
0002b7 5f1f      	SUBI R17,-LOW(1)
0002b8 c001      	RJMP _0x2020045
                 _0x2020044:
0002b9 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002ba c004      	RJMP _0x2020046
                 _0x2020042:
0002bb 940e 03d4 	CALL SUBOPT_0x6
0002bd 940e 03ea 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
0002bf fd00      	SBRC R16,0
0002c0 c011      	RJMP _0x2020047
                 _0x2020048:
0002c1 1715      	CP   R17,R21
0002c2 f478      	BRSH _0x202004A
0002c3 ff07      	SBRS R16,7
0002c4 c008      	RJMP _0x202004B
0002c5 ff02      	SBRS R16,2
0002c6 c004      	RJMP _0x202004C
0002c7 7f0b      	ANDI R16,LOW(251)
0002c8 2f24      	MOV  R18,R20
0002c9 5011      	SUBI R17,LOW(1)
0002ca c001      	RJMP _0x202004D
                 _0x202004C:
0002cb e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002cc c001      	RJMP _0x202004E
                 _0x202004B:
0002cd e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002ce 940e 03cd 	CALL SUBOPT_0x5
0002d0 5051      	SUBI R21,LOW(1)
0002d1 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002d2 2f31      	MOV  R19,R17
0002d3 ff01      	SBRS R16,1
0002d4 c017      	RJMP _0x202004F
                 _0x2020050:
0002d5 3030      	CPI  R19,0
0002d6 f0a1      	BREQ _0x2020052
0002d7 ff03      	SBRS R16,3
0002d8 c006      	RJMP _0x2020053
0002d9 81ee      	LDD  R30,Y+6
0002da 81ff      	LDD  R31,Y+6+1
0002db 9125      	LPM  R18,Z+
0002dc 83ee      	STD  Y+6,R30
0002dd 83ff      	STD  Y+6+1,R31
0002de c005      	RJMP _0x2020054
                 _0x2020053:
0002df 81ae      	LDD  R26,Y+6
0002e0 81bf      	LDD  R27,Y+6+1
0002e1 912d      	LD   R18,X+
0002e2 83ae      	STD  Y+6,R26
0002e3 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002e4 940e 03cd 	CALL SUBOPT_0x5
0002e6 3050      	CPI  R21,0
0002e7 f009      	BREQ _0x2020055
0002e8 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002e9 5031      	SUBI R19,LOW(1)
0002ea cfea      	RJMP _0x2020050
                 _0x2020052:
0002eb c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002ec e320      	LDI  R18,LOW(48)
0002ed 81ee      	LDD  R30,Y+6
0002ee 81ff      	LDD  R31,Y+6+1
0002ef 940e 045f 	CALL __GETW1PF
0002f1 87e8      	STD  Y+8,R30
0002f2 87f9      	STD  Y+8+1,R31
0002f3 81ee      	LDD  R30,Y+6
0002f4 81ff      	LDD  R31,Y+6+1
0002f5 9632      	ADIW R30,2
0002f6 83ee      	STD  Y+6,R30
0002f7 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002f8 85e8      	LDD  R30,Y+8
0002f9 85f9      	LDD  R31,Y+8+1
0002fa 85aa      	LDD  R26,Y+10
0002fb 85bb      	LDD  R27,Y+10+1
0002fc 17ae      	CP   R26,R30
0002fd 07bf      	CPC  R27,R31
0002fe f050      	BRLO _0x202005C
0002ff 5f2f      	SUBI R18,-LOW(1)
000300 85a8      	LDD  R26,Y+8
000301 85b9      	LDD  R27,Y+8+1
000302 85ea      	LDD  R30,Y+10
000303 85fb      	LDD  R31,Y+10+1
000304 1bea      	SUB  R30,R26
000305 0bfb      	SBC  R31,R27
000306 87ea      	STD  Y+10,R30
000307 87fb      	STD  Y+10+1,R31
000308 cfef      	RJMP _0x202005A
                 _0x202005C:
000309 332a      	CPI  R18,58
00030a f028      	BRLO _0x202005D
00030b ff03      	SBRS R16,3
00030c c002      	RJMP _0x202005E
00030d 5f29      	SUBI R18,-LOW(7)
00030e c001      	RJMP _0x202005F
                 _0x202005E:
00030f 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000310 fd04      	SBRC R16,4
000311 c01a      	RJMP _0x2020061
000312 3321      	CPI  R18,49
000313 f420      	BRSH _0x2020063
000314 85a8      	LDD  R26,Y+8
000315 85b9      	LDD  R27,Y+8+1
000316 9711      	SBIW R26,1
000317 f409      	BRNE _0x2020062
                 _0x2020063:
000318 c009      	RJMP _0x20200CD
                 _0x2020062:
000319 1753      	CP   R21,R19
00031a f010      	BRLO _0x2020067
00031b ff00      	SBRS R16,0
00031c c001      	RJMP _0x2020068
                 _0x2020067:
00031d c013      	RJMP _0x2020066
                 _0x2020068:
00031e e220      	LDI  R18,LOW(32)
00031f ff07      	SBRS R16,7
000320 c00b      	RJMP _0x2020069
000321 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000322 6100      	ORI  R16,LOW(16)
000323 ff02      	SBRS R16,2
000324 c007      	RJMP _0x202006A
000325 7f0b      	ANDI R16,LOW(251)
000326 934a      	ST   -Y,R20
000327 940e 03da 	CALL SUBOPT_0x7
000329 3050      	CPI  R21,0
00032a f009      	BREQ _0x202006B
00032b 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00032c 940e 03cd 	CALL SUBOPT_0x5
00032e 3050      	CPI  R21,0
00032f f009      	BREQ _0x202006C
000330 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000331 5031      	SUBI R19,LOW(1)
000332 85a8      	LDD  R26,Y+8
000333 85b9      	LDD  R27,Y+8+1
000334 9712      	SBIW R26,2
000335 f008      	BRLO _0x2020059
000336 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000337 ff00      	SBRS R16,0
000338 c008      	RJMP _0x202006D
                 _0x202006E:
000339 3050      	CPI  R21,0
00033a f031      	BREQ _0x2020070
00033b 5051      	SUBI R21,LOW(1)
00033c e2e0      	LDI  R30,LOW(32)
00033d 93ea      	ST   -Y,R30
00033e 940e 03da 	CALL SUBOPT_0x7
000340 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000341 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000342 cee0      	RJMP _0x2020016
                 _0x2020018:
000343 85ac      	LDD  R26,Y+12
000344 85bd      	LDD  R27,Y+12+1
000345 940e 045b 	CALL __GETW1P
000347 940e 0473 	CALL __LOADLOCR6
000349 9664      	ADIW R28,20
00034a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00034b 92ff      	PUSH R15
00034c 2ef8      	MOV  R15,R24
00034d 9726      	SBIW R28,6
00034e 940e 046e 	CALL __SAVELOCR4
000350 940e 03f2 	CALL SUBOPT_0xA
000352 9730      	SBIW R30,0
000353 f419      	BRNE _0x2020072
000354 efef      	LDI  R30,LOW(65535)
000355 efff      	LDI  R31,HIGH(65535)
000356 c023      	RJMP _0x2080001
                 _0x2020072:
000357 01de      	MOVW R26,R28
000358 9616      	ADIW R26,6
000359 940e 0403 	CALL __ADDW2R15
00035b 018d      	MOVW R16,R26
00035c 940e 03f2 	CALL SUBOPT_0xA
00035e 83ee      	STD  Y+6,R30
00035f 83ff      	STD  Y+6+1,R31
000360 e0e0      	LDI  R30,LOW(0)
000361 87e8      	STD  Y+8,R30
000362 87e9      	STD  Y+8+1,R30
000363 01de      	MOVW R26,R28
000364 961a      	ADIW R26,10
000365 940e 0403 	CALL __ADDW2R15
000367 940e 045b 	CALL __GETW1P
000369 93fa      	ST   -Y,R31
00036a 93ea      	ST   -Y,R30
00036b 931a      	ST   -Y,R17
00036c 930a      	ST   -Y,R16
00036d ede7      	LDI  R30,LOW(_put_buff_G101)
00036e e0f1      	LDI  R31,HIGH(_put_buff_G101)
00036f 93fa      	ST   -Y,R31
000370 93ea      	ST   -Y,R30
000371 01de      	MOVW R26,R28
000372 961a      	ADIW R26,10
000373 dea3      	RCALL __print_G101
000374 019f      	MOVW R18,R30
000375 81ae      	LDD  R26,Y+6
000376 81bf      	LDD  R27,Y+6+1
000377 e0e0      	LDI  R30,LOW(0)
000378 93ec      	ST   X,R30
000379 01f9      	MOVW R30,R18
                 _0x2080001:
00037a 940e 0475 	CALL __LOADLOCR4
00037c 962a      	ADIW R28,10
00037d 90ff      	POP  R15
00037e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00037f 93ba      	ST   -Y,R27
000380 93aa      	ST   -Y,R26
000381 91a9          ld   r26,y+
000382 91b9          ld   r27,y+
000383 27ee          clr  r30
000384 27ff          clr  r31
                 strlen0:
000385 916d          ld   r22,x+
000386 2366          tst  r22
000387 f011          breq strlen1
000388 9631          adiw r30,1
000389 cffb          rjmp strlen0
                 strlen1:
00038a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00038b 93ba      	ST   -Y,R27
00038c 93aa      	ST   -Y,R26
00038d 27aa          clr  r26
00038e 27bb          clr  r27
00038f 91e9          ld   r30,y+
000390 91f9          ld   r31,y+
                 strlenf0:
000391 9005      	lpm  r0,z+
000392 2000          tst  r0
000393 f011          breq strlenf1
000394 9611          adiw r26,1
000395 cffb          rjmp strlenf0
                 strlenf1:
000396 01fd          movw r30,r26
000397 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _seg:
000260           	.BYTE 0xA
                 __base_y_G100:
00026a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
000398 e000     +LDI R16 , LOW ( 0 )
000399 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00039a e020     +LDI R18 , LOW ( 0 )
00039b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00039c e040     +LDI R20 , LOW ( 0 )
00039d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1:
00039f 989c      	CBI  0x13,4
0003a0 9a9c      	SBI  0x13,4
0003a1 e6a0      	LDI  R26,LOW(_seg)
0003a2 e0b2      	LDI  R27,HIGH(_seg)
0003a3 0fa4      	ADD  R26,R20
0003a4 1fb5      	ADC  R27,R21
0003a5 91ec      	LD   R30,X
0003a6 bbeb      	OUT  0x1B,R30
0003a7 e0a5      	LDI  R26,LOW(5)
0003a8 e0b0      	LDI  R27,0
0003a9 940e 03f9 	CALL _delay_ms
0003ab 989d      	CBI  0x13,5
0003ac 9a9d      	SBI  0x13,5
0003ad a1ea      	LDD  R30,Y+34
0003ae a1fb      	LDD  R31,Y+34+1
0003af 5ae0      	SUBI R30,LOW(-_seg)
0003b0 4ffd      	SBCI R31,HIGH(-_seg)
0003b1 81e0      	LD   R30,Z
0003b2 bbeb      	OUT  0x1B,R30
0003b3 e0a5      	LDI  R26,LOW(5)
0003b4 e0b0      	LDI  R27,0
0003b5 940c 03f9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003b7 940e 040b 	CALL __CWD1
0003b9 940e 0463 	CALL __PUTPARD1
0003bb e084      	LDI  R24,4
0003bc 940e 034b 	CALL _sprintf
0003be 9628      	ADIW R28,8
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003c0 940e 015f 	CALL __lcd_write_data
0003c2 e0a3      	LDI  R26,LOW(3)
0003c3 e0b0      	LDI  R27,0
0003c4 940c 03f9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0003c6 e3a0      	LDI  R26,LOW(48)
0003c7 940e 014b 	CALL __lcd_write_nibble_G100
                +
0003c9 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003ca 958a     +DEC R24
0003cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0003cd 932a      	ST   -Y,R18
0003ce 85ad      	LDD  R26,Y+13
0003cf 85be      	LDD  R27,Y+13+1
0003d0 85ef      	LDD  R30,Y+15
0003d1 89f8      	LDD  R31,Y+15+1
0003d2 9509      	ICALL
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0003d4 89e8      	LDD  R30,Y+16
0003d5 89f9      	LDD  R31,Y+16+1
0003d6 9734      	SBIW R30,4
0003d7 8be8      	STD  Y+16,R30
0003d8 8bf9      	STD  Y+16+1,R31
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0003da 85ad      	LDD  R26,Y+13
0003db 85be      	LDD  R27,Y+13+1
0003dc 85ef      	LDD  R30,Y+15
0003dd 89f8      	LDD  R31,Y+15+1
0003de 9509      	ICALL
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0003e0 89a8      	LDD  R26,Y+16
0003e1 89b9      	LDD  R27,Y+16+1
0003e2 9614      	ADIW R26,4
0003e3 940e 045b 	CALL __GETW1P
0003e5 83ee      	STD  Y+6,R30
0003e6 83ff      	STD  Y+6+1,R31
0003e7 81ae      	LDD  R26,Y+6
0003e8 81bf      	LDD  R27,Y+6+1
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0003ea 89a8      	LDD  R26,Y+16
0003eb 89b9      	LDD  R27,Y+16+1
0003ec 9614      	ADIW R26,4
0003ed 940e 045b 	CALL __GETW1P
0003ef 87ea      	STD  Y+10,R30
0003f0 87fb      	STD  Y+10+1,R31
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003f2 01de      	MOVW R26,R28
0003f3 961c      	ADIW R26,12
0003f4 940e 0403 	CALL __ADDW2R15
0003f6 940e 045b 	CALL __GETW1P
0003f8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f9 9610      	adiw r26,0
0003fa f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003fb ef8a     +LDI R24 , LOW ( 0xFA )
0003fc e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003fd 9701     +SBIW R24 , 1
0003fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003ff 95a8      	wdr
000400 9711      	sbiw r26,1
000401 f7c9      	brne __delay_ms0
                 __delay_ms1:
000402 9508      	ret
                 
                 __ADDW2R15:
000403 2400      	CLR  R0
000404 0daf      	ADD  R26,R15
000405 1db0      	ADC  R27,R0
000406 9508      	RET
                 
                 __ANEGW1:
000407 95f1      	NEG  R31
000408 95e1      	NEG  R30
000409 40f0      	SBCI R31,0
00040a 9508      	RET
                 
                 __CWD1:
00040b 2f6f      	MOV  R22,R31
00040c 0f66      	ADD  R22,R22
00040d 0b66      	SBC  R22,R22
00040e 2f76      	MOV  R23,R22
00040f 9508      	RET
                 
                 __MULW12U:
000410 9ffa      	MUL  R31,R26
000411 2df0      	MOV  R31,R0
000412 9feb      	MUL  R30,R27
000413 0df0      	ADD  R31,R0
000414 9fea      	MUL  R30,R26
000415 2de0      	MOV  R30,R0
000416 0df1      	ADD  R31,R1
000417 9508      	RET
                 
                 __MULW12:
000418 d034      	RCALL __CHKSIGNW
000419 dff6      	RCALL __MULW12U
00041a f40e      	BRTC __MULW121
00041b dfeb      	RCALL __ANEGW1
                 __MULW121:
00041c 9508      	RET
                 
                 __DIVW21U:
00041d 2400      	CLR  R0
00041e 2411      	CLR  R1
00041f e190      	LDI  R25,16
                 __DIVW21U1:
000420 0faa      	LSL  R26
000421 1fbb      	ROL  R27
000422 1c00      	ROL  R0
000423 1c11      	ROL  R1
000424 1a0e      	SUB  R0,R30
000425 0a1f      	SBC  R1,R31
000426 f418      	BRCC __DIVW21U2
000427 0e0e      	ADD  R0,R30
000428 1e1f      	ADC  R1,R31
000429 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00042a 60a1      	SBR  R26,1
                 __DIVW21U3:
00042b 959a      	DEC  R25
00042c f799      	BRNE __DIVW21U1
00042d 01fd      	MOVW R30,R26
00042e 01d0      	MOVW R26,R0
00042f 9508      	RET
                 
                 __DIVW21:
000430 d01c      	RCALL __CHKSIGNW
000431 dfeb      	RCALL __DIVW21U
000432 f40e      	BRTC __DIVW211
000433 dfd3      	RCALL __ANEGW1
                 __DIVW211:
000434 9508      	RET
                 
                 __MODW21:
000435 94e8      	CLT
000436 ffb7      	SBRS R27,7
000437 c004      	RJMP __MODW211
000438 95a0      	COM  R26
000439 95b0      	COM  R27
00043a 9611      	ADIW R26,1
00043b 9468      	SET
                 __MODW211:
00043c fdf7      	SBRC R31,7
00043d dfc9      	RCALL __ANEGW1
00043e dfde      	RCALL __DIVW21U
00043f 01fd      	MOVW R30,R26
000440 f40e      	BRTC __MODW212
000441 dfc5      	RCALL __ANEGW1
                 __MODW212:
000442 9508      	RET
                 
                 __MANDW12:
000443 94e8      	CLT
000444 fff7      	SBRS R31,7
000445 c002      	RJMP __MANDW121
000446 dfc0      	RCALL __ANEGW1
000447 9468      	SET
                 __MANDW121:
000448 23ea      	AND  R30,R26
000449 23fb      	AND  R31,R27
00044a f40e      	BRTC __MANDW122
00044b dfbb      	RCALL __ANEGW1
                 __MANDW122:
00044c 9508      	RET
                 
                 __CHKSIGNW:
00044d 94e8      	CLT
00044e fff7      	SBRS R31,7
00044f c002      	RJMP __CHKSW1
000450 dfb6      	RCALL __ANEGW1
000451 9468      	SET
                 __CHKSW1:
000452 ffb7      	SBRS R27,7
000453 c006      	RJMP __CHKSW2
000454 95a0      	COM  R26
000455 95b0      	COM  R27
000456 9611      	ADIW R26,1
000457 f800      	BLD  R0,0
000458 9403      	INC  R0
000459 fa00      	BST  R0,0
                 __CHKSW2:
00045a 9508      	RET
                 
                 __GETW1P:
00045b 91ed      	LD   R30,X+
00045c 91fc      	LD   R31,X
00045d 9711      	SBIW R26,1
00045e 9508      	RET
                 
                 __GETW1PF:
00045f 9005      	LPM  R0,Z+
000460 91f4      	LPM  R31,Z
000461 2de0      	MOV  R30,R0
000462 9508      	RET
                 
                 __PUTPARD1:
000463 937a      	ST   -Y,R23
000464 936a      	ST   -Y,R22
000465 93fa      	ST   -Y,R31
000466 93ea      	ST   -Y,R30
000467 9508      	RET
                 
                 __CPW02:
000468 2400      	CLR  R0
000469 160a      	CP   R0,R26
00046a 060b      	CPC  R0,R27
00046b 9508      	RET
                 
                 __SAVELOCR6:
00046c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00046d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00046e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00046f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000470 931a      	ST   -Y,R17
000471 930a      	ST   -Y,R16
000472 9508      	RET
                 
                 __LOADLOCR6:
000473 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000474 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000475 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000476 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000477 8119      	LDD  R17,Y+1
000478 8108      	LD   R16,Y
000479 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  32 r1 :   7 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  48 r17:  30 r18:  36 r19:  13 r20:  15 r21:  21 r22:  11 r23:   2 
r24:  23 r25:   5 r26: 135 r27:  57 r28:  24 r29:   1 r30: 222 r31:  90 
x  :  26 y  : 193 z  :  16 
Registers used: 25 out of 35 (71.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  11 
adiw  :  34 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   2 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   4 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  67 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   7 cpc   :   7 cpi   :  35 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  24 ld    :  27 ldd   :  87 ldi   : 127 
lds   :   0 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  21 movw  :  39 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  18 pop   :   1 push  :   1 rcall :  33 ret   :  36 
reti  :   0 rjmp  :  75 rol   :   5 ror   :   0 sbc   :   3 sbci  :   8 
sbi   :   7 sbic  :   3 sbis  :   1 sbiw  :  20 sbr   :   1 sbrc  :   3 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  38 sts   :   2 sub   :   2 subi  :  22 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008f4   2220     72   2292   32768   7.0%
[.dseg] 0x000060 0x00026e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
