
AVRASM ver. 2.1.30  D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm Wed Dec 28 19:42:02 2022

D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm(1089): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 063f
000034 4f5b
000035 6d66
000036 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000037 6f7f      	.DB  0x7F,0x6F
                 _0x0:
000038 0048      	.DB  0x48,0x0
                 _0x2000003:
000039 c080      	.DB  0x80,0xC0
                 _0x2060060:
D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm(1134): warning: .cseg .db misalignment - padding zero byte
00003a 0001      	.DB  0x1
                 _0x2060000:
00003b 4e2d
00003c 4e41
00003d 4900
00003e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\#Uni\#Terme 7\AVR_laboratory\projects\6.final\codevision\Debug\List\final.asm(1137): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000040 000a      	.DW  0x0A
000041 0260      	.DW  _seg
000042 0066      	.DW  _0x3*2
                 
000043 0002      	.DW  0x02
000044 026a      	.DW  __base_y_G100
000045 0072      	.DW  _0x2000003*2
                 
000046 0001      	.DW  0x01
000047 026e      	.DW  __seed_G103
000048 0074      	.DW  _0x2060060*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bff5      	OUT  MCUCR,R31
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000059 93ed      	ST   X+,R30
00005a 9701      	SBIW R24,1
00005b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005c e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005e 9185      	LPM  R24,Z+
00005f 9195      	LPM  R25,Z+
000060 9700      	SBIW R24,0
000061 f061      	BREQ __GLOBAL_INI_END
000062 91a5      	LPM  R26,Z+
000063 91b5      	LPM  R27,Z+
000064 9005      	LPM  R0,Z+
000065 9015      	LPM  R1,Z+
000066 01bf      	MOVW R22,R30
000067 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000068 9005      	LPM  R0,Z+
000069 920d      	ST   X+,R0
00006a 9701      	SBIW R24,1
00006b f7e1      	BRNE __GLOBAL_INI_LOOP
00006c 01fb      	MOVW R30,R22
00006d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 0076 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;
                 ;unsigned char seg[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66,
                 ;                         0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;
                 ;void main(void) {
                 ; 0000 000A void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000B 
                 ; 0000 000C   int position = 7;
                 ; 0000 000D   int segNumber = 10;
                 ; 0000 000E   int ledNumber = 8;
                 ; 0000 000F   int i = 0;
                 ; 0000 0010 
                 ; 0000 0011   int seg1 = 0;
                 ; 0000 0012   int seg2 = 1;
                 ; 0000 0013 
                 ; 0000 0014   PORTA = 0x00;
000076 9726      	SBIW R28,6
000077 e0e1      	LDI  R30,LOW(1)
000078 83e8      	ST   Y,R30
000079 e0e0      	LDI  R30,LOW(0)
00007a 83e9      	STD  Y+1,R30
00007b 83ea      	STD  Y+2,R30
00007c 83eb      	STD  Y+3,R30
00007d 83ec      	STD  Y+4,R30
00007e 83ed      	STD  Y+5,R30
                 ;	position -> R16,R17
                 ;	segNumber -> R18,R19
                 ;	ledNumber -> R20,R21
                 ;	i -> Y+4
                 ;	seg1 -> Y+2
                 ;	seg2 -> Y+0
                +
00007f e007     +LDI R16 , LOW ( 7 )
000080 e010     +LDI R17 , HIGH ( 7 )
                 	__GETWRN 16,17,7
                +
000081 e02a     +LDI R18 , LOW ( 10 )
000082 e030     +LDI R19 , HIGH ( 10 )
                 	__GETWRN 18,19,10
                +
000083 e048     +LDI R20 , LOW ( 8 )
000084 e050     +LDI R21 , HIGH ( 8 )
                 	__GETWRN 20,21,8
000085 bbeb      	OUT  0x1B,R30
                 ; 0000 0015   DDRA = 0xFF;
000086 efef      	LDI  R30,LOW(255)
000087 bbea      	OUT  0x1A,R30
                 ; 0000 0016 
                 ; 0000 0017   PORTB = 0x00;
000088 e0e0      	LDI  R30,LOW(0)
000089 bbe8      	OUT  0x18,R30
                 ; 0000 0018   DDRB = 0xFF;
00008a efef      	LDI  R30,LOW(255)
00008b bbe7      	OUT  0x17,R30
                 ; 0000 0019 
                 ; 0000 001A   PORTC = 0x00;
00008c e0e0      	LDI  R30,LOW(0)
00008d bbe5      	OUT  0x15,R30
                 ; 0000 001B   DDRC = 0x0F;
00008e e0ef      	LDI  R30,LOW(15)
00008f bbe4      	OUT  0x14,R30
                 ; 0000 001C 
                 ; 0000 001D   PORTD = 0x00;
000090 e0e0      	LDI  R30,LOW(0)
000091 bbe2      	OUT  0x12,R30
                 ; 0000 001E   DDRD = 0xFF;
000092 efef      	LDI  R30,LOW(255)
000093 bbe1      	OUT  0x11,R30
                 ; 0000 001F 
                 ; 0000 0020   lcd_init(16);
000094 e1a0      	LDI  R26,LOW(16)
000095 d0bb      	RCALL _lcd_init
                 ; 0000 0021 
                 ; 0000 0022   lcd_clear();
000096 940e 017e 	CALL SUBOPT_0x0
                 ; 0000 0023   lcd_gotoxy(position, 0);
                 ; 0000 0024   lcd_putsf("H");
                 ; 0000 0025   delay_ms(50);
                 ; 0000 0026 
                 ; 0000 0027   PORTA = ledNumber;
000098 bb4b      	OUT  0x1B,R20
                 ; 0000 0028   delay_ms(5);
000099 940e 018c 	CALL SUBOPT_0x1
                 ; 0000 0029 
                 ; 0000 002A   while (1) {
                 _0x4:
                 ; 0000 002B     PINC .0 = 0;
00009b 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 002C     PINC .0 = 1;
                 ; 0000 002D     PORTB = seg[seg1];
                 ; 0000 002E     delay_ms(5);
                 ; 0000 002F 
                 ; 0000 0030     PINC .1 = 0;
00009d 940e 0199 	CALL SUBOPT_0x3
                 ; 0000 0031     PINC .1 = 1;
                 ; 0000 0032     PORTB = seg[seg2];
                 ; 0000 0033     delay_ms(5);
                 ; 0000 0034 
                 ; 0000 0035     if (PINC .6 == 0 || PINC .7 == 0) {
00009f 9b9e      	SBIS 0x13,6
0000a0 c002      	RJMP _0x10
0000a1 999f      	SBIC 0x13,7
0000a2 c04b      	RJMP _0xF
                 _0x10:
                 ; 0000 0036       if (PINC .6 == 0) {
0000a3 999e      	SBIC 0x13,6
0000a4 c014      	RJMP _0x12
                 ; 0000 0037         if (position < 15) {
                +
0000a5 300f     +CPI R16 , LOW ( 15 )
0000a6 e0e0     +LDI R30 , HIGH ( 15 )
0000a7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
0000a8 f424      	BRGE _0x13
                 ; 0000 0038           position++;
                +
0000a9 5f0f     +SUBI R16 , LOW ( - 1 )
0000aa 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0039           segNumber++;
                +
0000ab 5f2f     +SUBI R18 , LOW ( - 1 )
0000ac 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 003A         }
                 ; 0000 003B 
                 ; 0000 003C         if (ledNumber != 1) {
                 _0x13:
0000ad e0e1      	LDI  R30,LOW(1)
0000ae e0f0      	LDI  R31,HIGH(1)
0000af 17e4      	CP   R30,R20
0000b0 07f5      	CPC  R31,R21
0000b1 f031      	BREQ _0x14
                 ; 0000 003D           ledNumber = ledNumber / 2;
0000b2 01da      	MOVW R26,R20
0000b3 e0e2      	LDI  R30,LOW(2)
0000b4 e0f0      	LDI  R31,HIGH(2)
0000b5 940e 01d0 	CALL __DIVW21
0000b7 01af      	MOVW R20,R30
                 ; 0000 003E         }
                 ; 0000 003F       } else if (PINC .7 == 0) {
                 _0x14:
0000b8 c011      	RJMP _0x15
                 _0x12:
0000b9 999f      	SBIC 0x13,7
0000ba c00f      	RJMP _0x16
                 ; 0000 0040         if (position > 0) {
0000bb 2400      	CLR  R0
0000bc 1600      	CP   R0,R16
0000bd 0601      	CPC  R0,R17
0000be f424      	BRGE _0x17
                 ; 0000 0041           position--;
                +
0000bf 5001     +SUBI R16 , LOW ( 1 )
0000c0 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0042           segNumber--;
                +
0000c1 5021     +SUBI R18 , LOW ( 1 )
0000c2 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 0043         }
                 ; 0000 0044 
                 ; 0000 0045         if (ledNumber != 64) {
                 _0x17:
0000c3 e4e0      	LDI  R30,LOW(64)
0000c4 e0f0      	LDI  R31,HIGH(64)
0000c5 17e4      	CP   R30,R20
0000c6 07f5      	CPC  R31,R21
0000c7 f011      	BREQ _0x18
                 ; 0000 0046           ledNumber = ledNumber * 2;
0000c8 0f44      	LSL  R20
0000c9 1f55      	ROL  R21
                 ; 0000 0047         }
                 ; 0000 0048       }
                 _0x18:
                 ; 0000 0049 
                 ; 0000 004A       // 1 2 4 8 16
                 ; 0000 004B       // 0 1 2 3 4
                 ; 0000 004C 
                 ; 0000 004D       lcd_clear();
                 _0x16:
                 _0x15:
0000ca 940e 017e 	CALL SUBOPT_0x0
                 ; 0000 004E       lcd_gotoxy(position, 0);
                 ; 0000 004F       lcd_putsf("H");
                 ; 0000 0050       delay_ms(50);
                 ; 0000 0051 
                 ; 0000 0052       seg1 = segNumber % 10;
0000cc 01d9      	MOVW R26,R18
0000cd e0ea      	LDI  R30,LOW(10)
0000ce e0f0      	LDI  R31,HIGH(10)
0000cf 940e 01d5 	CALL __MODW21
0000d1 83ea      	STD  Y+2,R30
0000d2 83fb      	STD  Y+2+1,R31
                 ; 0000 0053       seg2 = segNumber / 10;
0000d3 01d9      	MOVW R26,R18
0000d4 e0ea      	LDI  R30,LOW(10)
0000d5 e0f0      	LDI  R31,HIGH(10)
0000d6 940e 01d0 	CALL __DIVW21
0000d8 83e8      	ST   Y,R30
0000d9 83f9      	STD  Y+1,R31
                 ; 0000 0054 
                 ; 0000 0055       for (i = 0; i < 25; i++) {
0000da e0e0      	LDI  R30,LOW(0)
0000db 83ec      	STD  Y+4,R30
0000dc 83ed      	STD  Y+4+1,R30
                 _0x1A:
0000dd 81ac      	LDD  R26,Y+4
0000de 81bd      	LDD  R27,Y+4+1
0000df 9759      	SBIW R26,25
0000e0 f454      	BRGE _0x1B
                 ; 0000 0056         PINC .0 = 0;
0000e1 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 0057         PINC .0 = 1;
                 ; 0000 0058         PORTB = seg[seg1];
                 ; 0000 0059         delay_ms(5);
                 ; 0000 005A 
                 ; 0000 005B         PINC .1 = 0;
0000e3 940e 0199 	CALL SUBOPT_0x3
                 ; 0000 005C         PINC .1 = 1;
                 ; 0000 005D         PORTB = seg[seg2];
                 ; 0000 005E         delay_ms(5);
                 ; 0000 005F       }
0000e5 81ec      	LDD  R30,Y+4
0000e6 81fd      	LDD  R31,Y+4+1
0000e7 9631      	ADIW R30,1
0000e8 83ec      	STD  Y+4,R30
0000e9 83fd      	STD  Y+4+1,R31
0000ea cff2      	RJMP _0x1A
                 _0x1B:
                 ; 0000 0060 
                 ; 0000 0061       PORTA = ledNumber;
0000eb bb4b      	OUT  0x1B,R20
                 ; 0000 0062       delay_ms(5);
0000ec 940e 018c 	CALL SUBOPT_0x1
                 ; 0000 0063     }
                 ; 0000 0064   }
                 _0xF:
0000ee cfac      	RJMP _0x4
                 ; 0000 0065 }
                 _0x24:
0000ef cfff      	RJMP _0x24
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f0 93aa      	ST   -Y,R26
0000f1 b3e2      	IN   R30,0x12
0000f2 70ef      	ANDI R30,LOW(0xF)
0000f3 2fae      	MOV  R26,R30
0000f4 81e8      	LD   R30,Y
0000f5 7fe0      	ANDI R30,LOW(0xF0)
0000f6 2bea      	OR   R30,R26
0000f7 bbe2      	OUT  0x12,R30
                +
0000f8 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f9 958a     +DEC R24
0000fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fb 9a92      	SBI  0x12,2
                +
0000fc e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000ff 9892      	CBI  0x12,2
                +
000100 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000101 958a     +DEC R24
000102 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000103 c078      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000104 93aa      	ST   -Y,R26
000105 81a8      	LD   R26,Y
000106 dfe9      	RCALL __lcd_write_nibble_G100
000107 81e8          ld    r30,y
000108 95e2          swap  r30
000109 83e8          st    y,r30
00010a 81a8      	LD   R26,Y
00010b dfe4      	RCALL __lcd_write_nibble_G100
                +
00010c e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00010f c06c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000110 93aa      	ST   -Y,R26
000111 81e8      	LD   R30,Y
000112 e0f0      	LDI  R31,0
000113 59e6      	SUBI R30,LOW(-__base_y_G100)
000114 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000115 81e0      	LD   R30,Z
000116 81a9      	LDD  R26,Y+1
000117 0fae      	ADD  R26,R30
000118 dfeb      	RCALL __lcd_write_data
000119 8059      	LDD  R5,Y+1
00011a 8048      	LDD  R4,Y+0
00011b 9622      	ADIW R28,2
00011c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011d e0a2      	LDI  R26,LOW(2)
00011e 940e 01a2 	CALL SUBOPT_0x4
000120 e0ac      	LDI  R26,LOW(12)
000121 dfe2      	RCALL __lcd_write_data
000122 e0a1      	LDI  R26,LOW(1)
000123 940e 01a2 	CALL SUBOPT_0x4
000125 e0e0      	LDI  R30,LOW(0)
000126 2e4e      	MOV  R4,R30
000127 2e5e      	MOV  R5,R30
000128 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000129 93aa      	ST   -Y,R26
00012a 81a8      	LD   R26,Y
00012b 30aa      	CPI  R26,LOW(0xA)
00012c f011      	BREQ _0x2000005
00012d 1457      	CP   R5,R7
00012e f048      	BRLO _0x2000004
                 _0x2000005:
00012f e0e0      	LDI  R30,LOW(0)
000130 93ea      	ST   -Y,R30
000131 9443      	INC  R4
000132 2da4      	MOV  R26,R4
000133 dfdc      	RCALL _lcd_gotoxy
000134 81a8      	LD   R26,Y
000135 30aa      	CPI  R26,LOW(0xA)
000136 f409      	BRNE _0x2000007
000137 c044      	RJMP _0x20C0001
                 _0x2000007:
                 _0x2000004:
000138 9453      	INC  R5
000139 9a90      	SBI  0x12,0
00013a 81a8      	LD   R26,Y
00013b dfc8      	RCALL __lcd_write_data
00013c 9890      	CBI  0x12,0
00013d c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00013e 93ba      	ST   -Y,R27
00013f 93aa      	ST   -Y,R26
000140 931a      	ST   -Y,R17
                 _0x200000B:
000141 81e9      	LDD  R30,Y+1
000142 81fa      	LDD  R31,Y+1+1
000143 9631      	ADIW R30,1
000144 83e9      	STD  Y+1,R30
000145 83fa      	STD  Y+1+1,R31
000146 9731      	SBIW R30,1
000147 91e4      	LPM  R30,Z
000148 2f1e      	MOV  R17,R30
000149 30e0      	CPI  R30,0
00014a f019      	BREQ _0x200000D
00014b 2fa1      	MOV  R26,R17
00014c dfdc      	RCALL _lcd_putchar
00014d cff3      	RJMP _0x200000B
                 _0x200000D:
00014e 8118      	LDD  R17,Y+0
00014f 9623      	ADIW R28,3
000150 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000151 93aa      	ST   -Y,R26
000152 b3e1      	IN   R30,0x11
000153 6fe0      	ORI  R30,LOW(0xF0)
000154 bbe1      	OUT  0x11,R30
000155 9a8a      	SBI  0x11,2
000156 9a88      	SBI  0x11,0
000157 9a89      	SBI  0x11,1
000158 9892      	CBI  0x12,2
000159 9890      	CBI  0x12,0
00015a 9891      	CBI  0x12,1
00015b 8078      	LDD  R7,Y+0
00015c 81e8      	LD   R30,Y
00015d 58e0      	SUBI R30,-LOW(128)
                +
00015e 93e0 026c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000160 81e8      	LD   R30,Y
000161 54e0      	SUBI R30,-LOW(192)
                +
000162 93e0 026d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000164 e1a4      	LDI  R26,LOW(20)
000165 e0b0      	LDI  R27,0
000166 940e 01af 	CALL _delay_ms
000168 940e 01a8 	CALL SUBOPT_0x5
00016a 940e 01a8 	CALL SUBOPT_0x5
00016c 940e 01a8 	CALL SUBOPT_0x5
00016e e2a0      	LDI  R26,LOW(32)
00016f df80      	RCALL __lcd_write_nibble_G100
                +
000170 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000171 958a     +DEC R24
000172 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000173 e2a8      	LDI  R26,LOW(40)
000174 df8f      	RCALL __lcd_write_data
000175 e0a4      	LDI  R26,LOW(4)
000176 df8d      	RCALL __lcd_write_data
000177 e8a5      	LDI  R26,LOW(133)
000178 df8b      	RCALL __lcd_write_data
000179 e0a6      	LDI  R26,LOW(6)
00017a df89      	RCALL __lcd_write_data
00017b dfa1      	RCALL _lcd_clear
                 _0x20C0001:
00017c 9621      	ADIW R28,1
00017d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _seg:
000260           	.BYTE 0xA
                 __base_y_G100:
00026a           	.BYTE 0x4
                 __seed_G103:
00026e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00017e 940e 011d 	CALL _lcd_clear
000180 930a      	ST   -Y,R16
000181 e0a0      	LDI  R26,LOW(0)
000182 940e 0110 	CALL _lcd_gotoxy
                +
000184 e7a0     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000185 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000186 940e 013e 	CALL _lcd_putsf
000188 e3a2      	LDI  R26,LOW(50)
000189 e0b0      	LDI  R27,0
00018a 940c 01af 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00018c e0a5      	LDI  R26,LOW(5)
00018d e0b0      	LDI  R27,0
00018e 940c 01af 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000190 9898      	CBI  0x13,0
000191 9a98      	SBI  0x13,0
000192 81ea      	LDD  R30,Y+2
000193 81fb      	LDD  R31,Y+2+1
000194 5ae0      	SUBI R30,LOW(-_seg)
000195 4ffd      	SBCI R31,HIGH(-_seg)
000196 81e0      	LD   R30,Z
000197 bbe8      	OUT  0x18,R30
000198 cff3      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000199 9899      	CBI  0x13,1
00019a 9a99      	SBI  0x13,1
00019b 81e8      	LD   R30,Y
00019c 81f9      	LDD  R31,Y+1
00019d 5ae0      	SUBI R30,LOW(-_seg)
00019e 4ffd      	SBCI R31,HIGH(-_seg)
00019f 81e0      	LD   R30,Z
0001a0 bbe8      	OUT  0x18,R30
0001a1 cfea      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001a2 940e 0104 	CALL __lcd_write_data
0001a4 e0a3      	LDI  R26,LOW(3)
0001a5 e0b0      	LDI  R27,0
0001a6 940c 01af 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0001a8 e3a0      	LDI  R26,LOW(48)
0001a9 940e 00f0 	CALL __lcd_write_nibble_G100
                +
0001ab e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ac 958a     +DEC R24
0001ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001ae 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001af 9610      	adiw r26,0
0001b0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001b1 ef8a     +LDI R24 , LOW ( 0xFA )
0001b2 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001b3 9701     +SBIW R24 , 1
0001b4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001b5 95a8      	wdr
0001b6 9711      	sbiw r26,1
0001b7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b8 9508      	ret
                 
                 __ANEGW1:
0001b9 95f1      	NEG  R31
0001ba 95e1      	NEG  R30
0001bb 40f0      	SBCI R31,0
0001bc 9508      	RET
                 
                 __DIVW21U:
0001bd 2400      	CLR  R0
0001be 2411      	CLR  R1
0001bf e190      	LDI  R25,16
                 __DIVW21U1:
0001c0 0faa      	LSL  R26
0001c1 1fbb      	ROL  R27
0001c2 1c00      	ROL  R0
0001c3 1c11      	ROL  R1
0001c4 1a0e      	SUB  R0,R30
0001c5 0a1f      	SBC  R1,R31
0001c6 f418      	BRCC __DIVW21U2
0001c7 0e0e      	ADD  R0,R30
0001c8 1e1f      	ADC  R1,R31
0001c9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ca 60a1      	SBR  R26,1
                 __DIVW21U3:
0001cb 959a      	DEC  R25
0001cc f799      	BRNE __DIVW21U1
0001cd 01fd      	MOVW R30,R26
0001ce 01d0      	MOVW R26,R0
0001cf 9508      	RET
                 
                 __DIVW21:
0001d0 d012      	RCALL __CHKSIGNW
0001d1 dfeb      	RCALL __DIVW21U
0001d2 f40e      	BRTC __DIVW211
0001d3 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001d4 9508      	RET
                 
                 __MODW21:
0001d5 94e8      	CLT
0001d6 ffb7      	SBRS R27,7
0001d7 c004      	RJMP __MODW211
0001d8 95a0      	COM  R26
0001d9 95b0      	COM  R27
0001da 9611      	ADIW R26,1
0001db 9468      	SET
                 __MODW211:
0001dc fdf7      	SBRC R31,7
0001dd dfdb      	RCALL __ANEGW1
0001de dfde      	RCALL __DIVW21U
0001df 01fd      	MOVW R30,R26
0001e0 f40e      	BRTC __MODW212
0001e1 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001e2 9508      	RET
                 
                 __CHKSIGNW:
0001e3 94e8      	CLT
0001e4 fff7      	SBRS R31,7
0001e5 c002      	RJMP __CHKSW1
0001e6 dfd2      	RCALL __ANEGW1
0001e7 9468      	SET
                 __CHKSW1:
0001e8 ffb7      	SBRS R27,7
0001e9 c006      	RJMP __CHKSW2
0001ea 95a0      	COM  R26
0001eb 95b0      	COM  R27
0001ec 9611      	ADIW R26,1
0001ed f800      	BLD  R0,0
0001ee 9403      	INC  R0
0001ef fa00      	BST  R0,0
                 __CHKSW2:
0001f0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   9 r18:   5 r19:   3 r20:   8 r21:   4 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  54 r27:  14 r28:   5 r29:   1 r30: 102 r31:  28 
x  :   3 y  :  52 z  :  11 
Registers used: 23 out of 35 (65.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   8 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  22 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   4 cpi   :   4 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  25 ld    :  14 ldd   :  14 ldi   :  72 
lds   :   0 lpm   :   9 lsl   :   2 lsr   :   0 mov   :   6 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  19 pop   :   0 push  :   0 rcall :  21 ret   :  11 
reti  :   0 rjmp  :  20 rol   :   4 ror   :   0 sbc   :   1 sbci  :   8 
sbi   :   7 sbic  :   3 sbis  :   1 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  16 std   :  14 sts   :   2 sub   :   1 subi  :   9 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e2    930     64    994   32768   3.0%
[.dseg] 0x000060 0x000272      0     18     18    2048   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
