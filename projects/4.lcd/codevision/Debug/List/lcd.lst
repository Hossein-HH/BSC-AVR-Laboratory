
AVRASM ver. 2.1.30  D:\#Uni\#Terme 7\AVR_laboratory\projects\4.lcd\codevision\Debug\List\lcd.asm Wed Dec 28 19:40:53 2022

D:\#Uni\#Terme 7\AVR_laboratory\projects\4.lcd\codevision\Debug\List\lcd.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\4.lcd\codevision\Debug\List\lcd.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\#Uni\#Terme 7\AVR_laboratory\projects\4.lcd\codevision\Debug\List\lcd.asm(1089): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 063f
000034 4f5b
000035 6d66
000036 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000037 6f7f      	.DB  0x7F,0x6F
                 _0x0:
000038 754e
000039 626d
00003a 7265
00003b 3d20      	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x3D
00003c 2520
00003d 0064      	.DB  0x20,0x25,0x64,0x0
                 _0x2000003:
00003e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003f 0002      	.DW  0x02
000040 0260      	.DW  __base_y_G100
000041 007c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bff5      	OUT  MCUCR,R31
000048 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000049 e08d      	LDI  R24,(14-2)+1
00004a e0a2      	LDI  R26,2
00004b 27bb      	CLR  R27
                 __CLEAR_REG:
00004c 93ed      	ST   X+,R30
00004d 958a      	DEC  R24
00004e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000050 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000051 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000052 93ed      	ST   X+,R30
000053 9701      	SBIW R24,1
000054 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000055 e7ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000056 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000057 9185      	LPM  R24,Z+
000058 9195      	LPM  R25,Z+
000059 9700      	SBIW R24,0
00005a f061      	BREQ __GLOBAL_INI_END
00005b 91a5      	LPM  R26,Z+
00005c 91b5      	LPM  R27,Z+
00005d 9005      	LPM  R0,Z+
00005e 9015      	LPM  R1,Z+
00005f 01bf      	MOVW R22,R30
000060 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000061 9005      	LPM  R0,Z+
000062 920d      	ST   X+,R0
000063 9701      	SBIW R24,1
000064 f7e1      	BRNE __GLOBAL_INI_LOOP
000065 01fb      	MOVW R30,R22
000066 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000067 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000068 bfed      	OUT  SPL,R30
000069 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006d 940c 006f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;
                 ;void main(void) {
                 ; 0000 0006 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0007 
                 ; 0000 0008   unsigned char i, j, tekrar;
                 ; 0000 0009   unsigned char cathode_seg[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66,
                 ; 0000 000A                                    0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 ; 0000 000B 
                 ; 0000 000C   char number[16];
                 ; 0000 000D 
                 ; 0000 000E   PORTA = 0x00;
00006f 976a      	SBIW R28,26
000070 e08a      	LDI  R24,10
000071 e1a0      	LDI  R26,LOW(16)
000072 e0b0      	LDI  R27,HIGH(16)
000073 e6e6      	LDI  R30,LOW(_0x3*2)
000074 e0f0      	LDI  R31,HIGH(_0x3*2)
000075 940e 0388 	CALL __INITLOCB
                 ;	i -> R17
                 ;	j -> R16
                 ;	tekrar -> R19
                 ;	cathode_seg -> Y+16
                 ;	number -> Y+0
000077 e0e0      	LDI  R30,LOW(0)
000078 bbeb      	OUT  0x1B,R30
                 ; 0000 000F   PORTB = 0x00;
000079 bbe8      	OUT  0x18,R30
                 ; 0000 0010   PORTC = 0x00;
00007a bbe5      	OUT  0x15,R30
                 ; 0000 0011   PORTD = 0x00;
00007b bbe2      	OUT  0x12,R30
                 ; 0000 0012 
                 ; 0000 0013   DDRA = 0xFF;
00007c efef      	LDI  R30,LOW(255)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 0014   DDRB = 0xFF;
00007e bbe7      	OUT  0x17,R30
                 ; 0000 0015   DDRC = 0xFF;
00007f bbe4      	OUT  0x14,R30
                 ; 0000 0016   DDRD = 0xFF;
000080 bbe1      	OUT  0x11,R30
                 ; 0000 0017 
                 ; 0000 0018   lcd_init(16);
000081 e1a0      	LDI  R26,LOW(16)
000082 d0a0      	RCALL _lcd_init
                 ; 0000 0019 
                 ; 0000 001A   while (1) {
                 _0x4:
                 ; 0000 001B     for (i = 0; i <= 9; i++) {
000083 e010      	LDI  R17,LOW(0)
                 _0x8:
000084 301a      	CPI  R17,10
000085 f5e0      	BRSH _0x9
                 ; 0000 001C       for (j = 0; j < 10; j++) {
000086 e000      	LDI  R16,LOW(0)
                 _0xB:
000087 300a      	CPI  R16,10
000088 f5b8      	BRSH _0xC
                 ; 0000 001D         lcd_gotoxy(2, 0);
000089 e0e2      	LDI  R30,LOW(2)
00008a 93ea      	ST   -Y,R30
00008b e0a0      	LDI  R26,LOW(0)
00008c d057      	RCALL _lcd_gotoxy
                 ; 0000 001E         sprintf(number, "Number = %d", (i * 10) + j);
00008d 01fe      	MOVW R30,R28
00008e 93fa      	ST   -Y,R31
00008f 93ea      	ST   -Y,R30
                +
000090 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000091 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000092 93fa      	ST   -Y,R31
000093 93ea      	ST   -Y,R30
000094 e0ea      	LDI  R30,LOW(10)
000095 9fe1      	MUL  R30,R17
000096 01f0      	MOVW R30,R0
000097 01df      	MOVW R26,R30
000098 2fe0      	MOV  R30,R16
000099 e0f0      	LDI  R31,0
00009a 0fea      	ADD  R30,R26
00009b 1ffb      	ADC  R31,R27
00009c 940e 0368 	CALL __CWD1
00009e 940e 0375 	CALL __PUTPARD1
0000a0 e084      	LDI  R24,4
0000a1 940e 02c4 	CALL _sprintf
0000a3 9628      	ADIW R28,8
                 ; 0000 001F         lcd_puts(number);
0000a4 01de      	MOVW R26,R28
0000a5 d06c      	RCALL _lcd_puts
                 ; 0000 0020         delay_ms(10);
0000a6 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 0021 
                 ; 0000 0022         PORTD = (i * 10) + j;
0000a8 e0aa      	LDI  R26,LOW(10)
0000a9 021a      	MULS R17,R26
0000aa 01f0      	MOVW R30,R0
0000ab 0fe0      	ADD  R30,R16
0000ac bbe2      	OUT  0x12,R30
                 ; 0000 0023         delay_ms(10);
0000ad 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 0024 
                 ; 0000 0025         for (tekrar = 0; tekrar < 25; tekrar++) {
0000af e030      	LDI  R19,LOW(0)
                 _0xE:
0000b0 3139      	CPI  R19,25
0000b1 f460      	BRSH _0xF
                 ; 0000 0026           PORTC = 1;
0000b2 e0e1      	LDI  R30,LOW(1)
0000b3 bbe5      	OUT  0x15,R30
                 ; 0000 0027           PORTA = cathode_seg[j];
0000b4 2fe0      	MOV  R30,R16
0000b5 940e 0315 	CALL SUBOPT_0x1
                 ; 0000 0028           delay_ms(10);
                 ; 0000 0029 
                 ; 0000 002A           PORTC = 2;
0000b7 e0e2      	LDI  R30,LOW(2)
0000b8 bbe5      	OUT  0x15,R30
                 ; 0000 002B           PORTA = cathode_seg[i];
0000b9 2fe1      	MOV  R30,R17
0000ba 940e 0315 	CALL SUBOPT_0x1
                 ; 0000 002C           delay_ms(10);
                 ; 0000 002D         }
0000bc 5f3f      	SUBI R19,-1
0000bd cff2      	RJMP _0xE
                 _0xF:
                 ; 0000 002E       }
0000be 5f0f      	SUBI R16,-1
0000bf cfc7      	RJMP _0xB
                 _0xC:
                 ; 0000 002F     }
0000c0 5f1f      	SUBI R17,-1
0000c1 cfc2      	RJMP _0x8
                 _0x9:
                 ; 0000 0030   }
0000c2 cfc0      	RJMP _0x4
                 ; 0000 0031 }
                 _0x10:
0000c3 cfff      	RJMP _0x10
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000c4 93aa      	ST   -Y,R26
0000c5 b3e8      	IN   R30,0x18
0000c6 70ef      	ANDI R30,LOW(0xF)
0000c7 2fae      	MOV  R26,R30
0000c8 81e8      	LD   R30,Y
0000c9 7fe0      	ANDI R30,LOW(0xF0)
0000ca 2bea      	OR   R30,R26
0000cb bbe8      	OUT  0x18,R30
                +
0000cc e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000cd 958a     +DEC R24
0000ce f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000cf 9ac2      	SBI  0x18,2
                +
0000d0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000d1 958a     +DEC R24
0000d2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000d3 98c2      	CBI  0x18,2
                +
0000d4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000d5 958a     +DEC R24
0000d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000d7 c076      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000d8 93aa      	ST   -Y,R26
0000d9 81a8      	LD   R26,Y
0000da dfe9      	RCALL __lcd_write_nibble_G100
0000db 81e8          ld    r30,y
0000dc 95e2          swap  r30
0000dd 83e8          st    y,r30
0000de 81a8      	LD   R26,Y
0000df dfe4      	RCALL __lcd_write_nibble_G100
                +
0000e0 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0000e1 958a     +DEC R24
0000e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0000e3 c06a      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000e4 93aa      	ST   -Y,R26
0000e5 81e8      	LD   R30,Y
0000e6 e0f0      	LDI  R31,0
0000e7 5ae0      	SUBI R30,LOW(-__base_y_G100)
0000e8 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0000e9 81e0      	LD   R30,Z
0000ea 81a9      	LDD  R26,Y+1
0000eb 0fae      	ADD  R26,R30
0000ec dfeb      	RCALL __lcd_write_data
0000ed 8059      	LDD  R5,Y+1
0000ee 8048      	LDD  R4,Y+0
0000ef 9622      	ADIW R28,2
0000f0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000f1 e0a2      	LDI  R26,LOW(2)
0000f2 940e 031d 	CALL SUBOPT_0x2
0000f4 e0ac      	LDI  R26,LOW(12)
0000f5 dfe2      	RCALL __lcd_write_data
0000f6 e0a1      	LDI  R26,LOW(1)
0000f7 940e 031d 	CALL SUBOPT_0x2
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa 2e4e      	MOV  R4,R30
0000fb 2e5e      	MOV  R5,R30
0000fc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0000fd 93aa      	ST   -Y,R26
0000fe 81a8      	LD   R26,Y
0000ff 30aa      	CPI  R26,LOW(0xA)
000100 f011      	BREQ _0x2000005
000101 1457      	CP   R5,R7
000102 f048      	BRLO _0x2000004
                 _0x2000005:
000103 e0e0      	LDI  R30,LOW(0)
000104 93ea      	ST   -Y,R30
000105 9443      	INC  R4
000106 2da4      	MOV  R26,R4
000107 dfdc      	RCALL _lcd_gotoxy
000108 81a8      	LD   R26,Y
000109 30aa      	CPI  R26,LOW(0xA)
00010a f409      	BRNE _0x2000007
00010b c042      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
00010c 9453      	INC  R5
00010d 9ac0      	SBI  0x18,0
00010e 81a8      	LD   R26,Y
00010f dfc8      	RCALL __lcd_write_data
000110 98c0      	CBI  0x18,0
000111 c03c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000112 93ba      	ST   -Y,R27
000113 93aa      	ST   -Y,R26
000114 931a      	ST   -Y,R17
                 _0x2000008:
000115 81a9      	LDD  R26,Y+1
000116 81ba      	LDD  R27,Y+1+1
000117 91ed      	LD   R30,X+
000118 83a9      	STD  Y+1,R26
000119 83ba      	STD  Y+1+1,R27
00011a 2f1e      	MOV  R17,R30
00011b 30e0      	CPI  R30,0
00011c f019      	BREQ _0x200000A
00011d 2fa1      	MOV  R26,R17
00011e dfde      	RCALL _lcd_putchar
00011f cff5      	RJMP _0x2000008
                 _0x200000A:
000120 8118      	LDD  R17,Y+0
000121 9623      	ADIW R28,3
000122 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000123 93aa      	ST   -Y,R26
000124 b3e7      	IN   R30,0x17
000125 6fe0      	ORI  R30,LOW(0xF0)
000126 bbe7      	OUT  0x17,R30
000127 9aba      	SBI  0x17,2
000128 9ab8      	SBI  0x17,0
000129 9ab9      	SBI  0x17,1
00012a 98c2      	CBI  0x18,2
00012b 98c0      	CBI  0x18,0
00012c 98c1      	CBI  0x18,1
00012d 8078      	LDD  R7,Y+0
00012e 81e8      	LD   R30,Y
00012f 58e0      	SUBI R30,-LOW(128)
                +
000130 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000132 81e8      	LD   R30,Y
000133 54e0      	SUBI R30,-LOW(192)
                +
000134 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000136 e1a4      	LDI  R26,LOW(20)
000137 e0b0      	LDI  R27,0
000138 940e 0356 	CALL _delay_ms
00013a 940e 0323 	CALL SUBOPT_0x3
00013c 940e 0323 	CALL SUBOPT_0x3
00013e 940e 0323 	CALL SUBOPT_0x3
000140 e2a0      	LDI  R26,LOW(32)
000141 df82      	RCALL __lcd_write_nibble_G100
                +
000142 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000143 958a     +DEC R24
000144 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000145 e2a8      	LDI  R26,LOW(40)
000146 df91      	RCALL __lcd_write_data
000147 e0a4      	LDI  R26,LOW(4)
000148 df8f      	RCALL __lcd_write_data
000149 e8a5      	LDI  R26,LOW(133)
00014a df8d      	RCALL __lcd_write_data
00014b e0a6      	LDI  R26,LOW(6)
00014c df8b      	RCALL __lcd_write_data
00014d dfa3      	RCALL _lcd_clear
                 _0x2080002:
00014e 9621      	ADIW R28,1
00014f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000150 93ba      	ST   -Y,R27
000151 93aa      	ST   -Y,R26
000152 931a      	ST   -Y,R17
000153 930a      	ST   -Y,R16
000154 81aa      	LDD  R26,Y+2
000155 81bb      	LDD  R27,Y+2+1
000156 9612      	ADIW R26,2
000157 940e 036d 	CALL __GETW1P
000159 9730      	SBIW R30,0
00015a f159      	BREQ _0x2020010
00015b 81aa      	LDD  R26,Y+2
00015c 81bb      	LDD  R27,Y+2+1
00015d 9614      	ADIW R26,4
00015e 940e 036d 	CALL __GETW1P
000160 018f      	MOVW R16,R30
000161 9730      	SBIW R30,0
000162 f061      	BREQ _0x2020012
                +
000163 3002     +CPI R16 , LOW ( 2 )
000164 e0e0     +LDI R30 , HIGH ( 2 )
000165 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000166 f098      	BRLO _0x2020013
000167 01f8      	MOVW R30,R16
000168 9731      	SBIW R30,1
000169 018f      	MOVW R16,R30
                +
00016a 81aa     +LDD R26 , Y + 2
00016b 81bb     +LDD R27 , Y + 2 + 1
00016c 9614     +ADIW R26 , 4
00016d 93ed     +ST X + , R30
00016e 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00016f 81aa      	LDD  R26,Y+2
000170 81bb      	LDD  R27,Y+2+1
000171 9612      	ADIW R26,2
000172 91ed      	LD   R30,X+
000173 91fd      	LD   R31,X+
000174 9631      	ADIW R30,1
000175 93fe      	ST   -X,R31
000176 93ee      	ST   -X,R30
000177 9731      	SBIW R30,1
000178 81ac      	LDD  R26,Y+4
000179 83a0      	STD  Z+0,R26
                 _0x2020013:
00017a 81aa      	LDD  R26,Y+2
00017b 81bb      	LDD  R27,Y+2+1
00017c 940e 036d 	CALL __GETW1P
00017e 23ff      	TST  R31
00017f f02a      	BRMI _0x2020014
000180 91ed      	LD   R30,X+
000181 91fd      	LD   R31,X+
000182 9631      	ADIW R30,1
000183 93fe      	ST   -X,R31
000184 93ee      	ST   -X,R30
                 _0x2020014:
000185 c006      	RJMP _0x2020015
                 _0x2020010:
000186 81aa      	LDD  R26,Y+2
000187 81bb      	LDD  R27,Y+2+1
000188 efef      	LDI  R30,LOW(65535)
000189 efff      	LDI  R31,HIGH(65535)
00018a 93ed      	ST   X+,R30
00018b 93fc      	ST   X,R31
                 _0x2020015:
00018c 8119      	LDD  R17,Y+1
00018d 8108      	LDD  R16,Y+0
00018e 9625      	ADIW R28,5
00018f 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000190 93ba      	ST   -Y,R27
000191 93aa      	ST   -Y,R26
000192 9726      	SBIW R28,6
000193 940e 037a 	CALL __SAVELOCR6
000195 e010      	LDI  R17,0
000196 85ac      	LDD  R26,Y+12
000197 85bd      	LDD  R27,Y+12+1
000198 e0e0      	LDI  R30,LOW(0)
000199 e0f0      	LDI  R31,HIGH(0)
00019a 93ed      	ST   X+,R30
00019b 93fc      	ST   X,R31
                 _0x2020016:
00019c 89ea      	LDD  R30,Y+18
00019d 89fb      	LDD  R31,Y+18+1
00019e 9631      	ADIW R30,1
00019f 8bea      	STD  Y+18,R30
0001a0 8bfb      	STD  Y+18+1,R31
0001a1 9731      	SBIW R30,1
0001a2 91e4      	LPM  R30,Z
0001a3 2f2e      	MOV  R18,R30
0001a4 30e0      	CPI  R30,0
0001a5 f409      	BRNE PC+2
0001a6 c115      	RJMP _0x2020018
0001a7 2fe1      	MOV  R30,R17
0001a8 30e0      	CPI  R30,0
0001a9 f439      	BRNE _0x202001C
0001aa 3225      	CPI  R18,37
0001ab f411      	BRNE _0x202001D
0001ac e011      	LDI  R17,LOW(1)
0001ad c002      	RJMP _0x202001E
                 _0x202001D:
0001ae 940e 032a 	CALL SUBOPT_0x4
                 _0x202001E:
0001b0 c10a      	RJMP _0x202001B
                 _0x202001C:
0001b1 30e1      	CPI  R30,LOW(0x1)
0001b2 f4a9      	BRNE _0x202001F
0001b3 3225      	CPI  R18,37
0001b4 f419      	BRNE _0x2020020
0001b5 940e 032a 	CALL SUBOPT_0x4
0001b7 c102      	RJMP _0x20200CC
                 _0x2020020:
0001b8 e012      	LDI  R17,LOW(2)
0001b9 e040      	LDI  R20,LOW(0)
0001ba e000      	LDI  R16,LOW(0)
0001bb 322d      	CPI  R18,45
0001bc f411      	BRNE _0x2020021
0001bd e001      	LDI  R16,LOW(1)
0001be c0fc      	RJMP _0x202001B
                 _0x2020021:
0001bf 322b      	CPI  R18,43
0001c0 f411      	BRNE _0x2020022
0001c1 e24b      	LDI  R20,LOW(43)
0001c2 c0f8      	RJMP _0x202001B
                 _0x2020022:
0001c3 3220      	CPI  R18,32
0001c4 f411      	BRNE _0x2020023
0001c5 e240      	LDI  R20,LOW(32)
0001c6 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001c7 c002      	RJMP _0x2020024
                 _0x202001F:
0001c8 30e2      	CPI  R30,LOW(0x2)
0001c9 f439      	BRNE _0x2020025
                 _0x2020024:
0001ca e050      	LDI  R21,LOW(0)
0001cb e013      	LDI  R17,LOW(3)
0001cc 3320      	CPI  R18,48
0001cd f411      	BRNE _0x2020026
0001ce 6800      	ORI  R16,LOW(128)
0001cf c0eb      	RJMP _0x202001B
                 _0x2020026:
0001d0 c003      	RJMP _0x2020027
                 _0x2020025:
0001d1 30e3      	CPI  R30,LOW(0x3)
0001d2 f009      	BREQ PC+2
0001d3 c0e7      	RJMP _0x202001B
                 _0x2020027:
0001d4 3320      	CPI  R18,48
0001d5 f010      	BRLO _0x202002A
0001d6 332a      	CPI  R18,58
0001d7 f008      	BRLO _0x202002B
                 _0x202002A:
0001d8 c007      	RJMP _0x2020029
                 _0x202002B:
0001d9 e0aa      	LDI  R26,LOW(10)
0001da 9f5a      	MUL  R21,R26
0001db 2d50      	MOV  R21,R0
0001dc 2fe2      	MOV  R30,R18
0001dd 53e0      	SUBI R30,LOW(48)
0001de 0f5e      	ADD  R21,R30
0001df c0db      	RJMP _0x202001B
                 _0x2020029:
0001e0 2fe2      	MOV  R30,R18
0001e1 36e3      	CPI  R30,LOW(0x63)
0001e2 f449      	BRNE _0x202002F
0001e3 940e 0331 	CALL SUBOPT_0x5
0001e5 89e8      	LDD  R30,Y+16
0001e6 89f9      	LDD  R31,Y+16+1
0001e7 81a4      	LDD  R26,Z+4
0001e8 93aa      	ST   -Y,R26
0001e9 940e 0337 	CALL SUBOPT_0x6
0001eb c0ce      	RJMP _0x2020030
                 _0x202002F:
0001ec 37e3      	CPI  R30,LOW(0x73)
0001ed f441      	BRNE _0x2020032
0001ee 940e 0331 	CALL SUBOPT_0x5
0001f0 940e 033d 	CALL SUBOPT_0x7
0001f2 940e 02f8 	CALL _strlen
0001f4 2f1e      	MOV  R17,R30
0001f5 c00a      	RJMP _0x2020033
                 _0x2020032:
0001f6 37e0      	CPI  R30,LOW(0x70)
0001f7 f461      	BRNE _0x2020035
0001f8 940e 0331 	CALL SUBOPT_0x5
0001fa 940e 033d 	CALL SUBOPT_0x7
0001fc 940e 0304 	CALL _strlenf
0001fe 2f1e      	MOV  R17,R30
0001ff 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000200 6002      	ORI  R16,LOW(2)
000201 770f      	ANDI R16,LOW(127)
000202 e030      	LDI  R19,LOW(0)
000203 c034      	RJMP _0x2020036
                 _0x2020035:
000204 36e4      	CPI  R30,LOW(0x64)
000205 f011      	BREQ _0x2020039
000206 36e9      	CPI  R30,LOW(0x69)
000207 f411      	BRNE _0x202003A
                 _0x2020039:
000208 6004      	ORI  R16,LOW(4)
000209 c002      	RJMP _0x202003B
                 _0x202003A:
00020a 37e5      	CPI  R30,LOW(0x75)
00020b f431      	BRNE _0x202003C
                 _0x202003B:
00020c e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00020d e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00020e 83ee      	STD  Y+6,R30
00020f 83ff      	STD  Y+6+1,R31
000210 e015      	LDI  R17,LOW(5)
000211 c00c      	RJMP _0x202003D
                 _0x202003C:
000212 35e8      	CPI  R30,LOW(0x58)
000213 f411      	BRNE _0x202003F
000214 6008      	ORI  R16,LOW(8)
000215 c003      	RJMP _0x2020040
                 _0x202003F:
000216 37e8      	CPI  R30,LOW(0x78)
000217 f009      	BREQ PC+2
000218 c0a1      	RJMP _0x2020071
                 _0x2020040:
000219 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00021a e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00021b 83ee      	STD  Y+6,R30
00021c 83ff      	STD  Y+6+1,R31
00021d e014      	LDI  R17,LOW(4)
                 _0x202003D:
00021e ff02      	SBRS R16,2
00021f c014      	RJMP _0x2020042
000220 940e 0331 	CALL SUBOPT_0x5
000222 940e 0347 	CALL SUBOPT_0x8
000224 85ab      	LDD  R26,Y+11
000225 23aa      	TST  R26
000226 f43a      	BRPL _0x2020043
000227 85ea      	LDD  R30,Y+10
000228 85fb      	LDD  R31,Y+10+1
000229 940e 0364 	CALL __ANEGW1
00022b 87ea      	STD  Y+10,R30
00022c 87fb      	STD  Y+10+1,R31
00022d e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00022e 3040      	CPI  R20,0
00022f f011      	BREQ _0x2020044
000230 5f1f      	SUBI R17,-LOW(1)
000231 c001      	RJMP _0x2020045
                 _0x2020044:
000232 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000233 c004      	RJMP _0x2020046
                 _0x2020042:
000234 940e 0331 	CALL SUBOPT_0x5
000236 940e 0347 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
000238 fd00      	SBRC R16,0
000239 c011      	RJMP _0x2020047
                 _0x2020048:
00023a 1715      	CP   R17,R21
00023b f478      	BRSH _0x202004A
00023c ff07      	SBRS R16,7
00023d c008      	RJMP _0x202004B
00023e ff02      	SBRS R16,2
00023f c004      	RJMP _0x202004C
000240 7f0b      	ANDI R16,LOW(251)
000241 2f24      	MOV  R18,R20
000242 5011      	SUBI R17,LOW(1)
000243 c001      	RJMP _0x202004D
                 _0x202004C:
000244 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000245 c001      	RJMP _0x202004E
                 _0x202004B:
000246 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000247 940e 032a 	CALL SUBOPT_0x4
000249 5051      	SUBI R21,LOW(1)
00024a cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00024b 2f31      	MOV  R19,R17
00024c ff01      	SBRS R16,1
00024d c017      	RJMP _0x202004F
                 _0x2020050:
00024e 3030      	CPI  R19,0
00024f f0a1      	BREQ _0x2020052
000250 ff03      	SBRS R16,3
000251 c006      	RJMP _0x2020053
000252 81ee      	LDD  R30,Y+6
000253 81ff      	LDD  R31,Y+6+1
000254 9125      	LPM  R18,Z+
000255 83ee      	STD  Y+6,R30
000256 83ff      	STD  Y+6+1,R31
000257 c005      	RJMP _0x2020054
                 _0x2020053:
000258 81ae      	LDD  R26,Y+6
000259 81bf      	LDD  R27,Y+6+1
00025a 912d      	LD   R18,X+
00025b 83ae      	STD  Y+6,R26
00025c 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00025d 940e 032a 	CALL SUBOPT_0x4
00025f 3050      	CPI  R21,0
000260 f009      	BREQ _0x2020055
000261 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000262 5031      	SUBI R19,LOW(1)
000263 cfea      	RJMP _0x2020050
                 _0x2020052:
000264 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000265 e320      	LDI  R18,LOW(48)
000266 81ee      	LDD  R30,Y+6
000267 81ff      	LDD  R31,Y+6+1
000268 940e 0371 	CALL __GETW1PF
00026a 87e8      	STD  Y+8,R30
00026b 87f9      	STD  Y+8+1,R31
00026c 81ee      	LDD  R30,Y+6
00026d 81ff      	LDD  R31,Y+6+1
00026e 9632      	ADIW R30,2
00026f 83ee      	STD  Y+6,R30
000270 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000271 85e8      	LDD  R30,Y+8
000272 85f9      	LDD  R31,Y+8+1
000273 85aa      	LDD  R26,Y+10
000274 85bb      	LDD  R27,Y+10+1
000275 17ae      	CP   R26,R30
000276 07bf      	CPC  R27,R31
000277 f050      	BRLO _0x202005C
000278 5f2f      	SUBI R18,-LOW(1)
000279 85a8      	LDD  R26,Y+8
00027a 85b9      	LDD  R27,Y+8+1
00027b 85ea      	LDD  R30,Y+10
00027c 85fb      	LDD  R31,Y+10+1
00027d 1bea      	SUB  R30,R26
00027e 0bfb      	SBC  R31,R27
00027f 87ea      	STD  Y+10,R30
000280 87fb      	STD  Y+10+1,R31
000281 cfef      	RJMP _0x202005A
                 _0x202005C:
000282 332a      	CPI  R18,58
000283 f028      	BRLO _0x202005D
000284 ff03      	SBRS R16,3
000285 c002      	RJMP _0x202005E
000286 5f29      	SUBI R18,-LOW(7)
000287 c001      	RJMP _0x202005F
                 _0x202005E:
000288 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000289 fd04      	SBRC R16,4
00028a c01a      	RJMP _0x2020061
00028b 3321      	CPI  R18,49
00028c f420      	BRSH _0x2020063
00028d 85a8      	LDD  R26,Y+8
00028e 85b9      	LDD  R27,Y+8+1
00028f 9711      	SBIW R26,1
000290 f409      	BRNE _0x2020062
                 _0x2020063:
000291 c009      	RJMP _0x20200CD
                 _0x2020062:
000292 1753      	CP   R21,R19
000293 f010      	BRLO _0x2020067
000294 ff00      	SBRS R16,0
000295 c001      	RJMP _0x2020068
                 _0x2020067:
000296 c013      	RJMP _0x2020066
                 _0x2020068:
000297 e220      	LDI  R18,LOW(32)
000298 ff07      	SBRS R16,7
000299 c00b      	RJMP _0x2020069
00029a e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00029b 6100      	ORI  R16,LOW(16)
00029c ff02      	SBRS R16,2
00029d c007      	RJMP _0x202006A
00029e 7f0b      	ANDI R16,LOW(251)
00029f 934a      	ST   -Y,R20
0002a0 940e 0337 	CALL SUBOPT_0x6
0002a2 3050      	CPI  R21,0
0002a3 f009      	BREQ _0x202006B
0002a4 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002a5 940e 032a 	CALL SUBOPT_0x4
0002a7 3050      	CPI  R21,0
0002a8 f009      	BREQ _0x202006C
0002a9 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002aa 5031      	SUBI R19,LOW(1)
0002ab 85a8      	LDD  R26,Y+8
0002ac 85b9      	LDD  R27,Y+8+1
0002ad 9712      	SBIW R26,2
0002ae f008      	BRLO _0x2020059
0002af cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002b0 ff00      	SBRS R16,0
0002b1 c008      	RJMP _0x202006D
                 _0x202006E:
0002b2 3050      	CPI  R21,0
0002b3 f031      	BREQ _0x2020070
0002b4 5051      	SUBI R21,LOW(1)
0002b5 e2e0      	LDI  R30,LOW(32)
0002b6 93ea      	ST   -Y,R30
0002b7 940e 0337 	CALL SUBOPT_0x6
0002b9 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002ba e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002bb cee0      	RJMP _0x2020016
                 _0x2020018:
0002bc 85ac      	LDD  R26,Y+12
0002bd 85bd      	LDD  R27,Y+12+1
0002be 940e 036d 	CALL __GETW1P
0002c0 940e 0381 	CALL __LOADLOCR6
0002c2 9664      	ADIW R28,20
0002c3 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002c4 92ff      	PUSH R15
0002c5 2ef8      	MOV  R15,R24
0002c6 9726      	SBIW R28,6
0002c7 940e 037c 	CALL __SAVELOCR4
0002c9 940e 034f 	CALL SUBOPT_0x9
0002cb 9730      	SBIW R30,0
0002cc f419      	BRNE _0x2020072
0002cd efef      	LDI  R30,LOW(65535)
0002ce efff      	LDI  R31,HIGH(65535)
0002cf c023      	RJMP _0x2080001
                 _0x2020072:
0002d0 01de      	MOVW R26,R28
0002d1 9616      	ADIW R26,6
0002d2 940e 0360 	CALL __ADDW2R15
0002d4 018d      	MOVW R16,R26
0002d5 940e 034f 	CALL SUBOPT_0x9
0002d7 83ee      	STD  Y+6,R30
0002d8 83ff      	STD  Y+6+1,R31
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 87e8      	STD  Y+8,R30
0002db 87e9      	STD  Y+8+1,R30
0002dc 01de      	MOVW R26,R28
0002dd 961a      	ADIW R26,10
0002de 940e 0360 	CALL __ADDW2R15
0002e0 940e 036d 	CALL __GETW1P
0002e2 93fa      	ST   -Y,R31
0002e3 93ea      	ST   -Y,R30
0002e4 931a      	ST   -Y,R17
0002e5 930a      	ST   -Y,R16
0002e6 e5e0      	LDI  R30,LOW(_put_buff_G101)
0002e7 e0f1      	LDI  R31,HIGH(_put_buff_G101)
0002e8 93fa      	ST   -Y,R31
0002e9 93ea      	ST   -Y,R30
0002ea 01de      	MOVW R26,R28
0002eb 961a      	ADIW R26,10
0002ec dea3      	RCALL __print_G101
0002ed 019f      	MOVW R18,R30
0002ee 81ae      	LDD  R26,Y+6
0002ef 81bf      	LDD  R27,Y+6+1
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 93ec      	ST   X,R30
0002f2 01f9      	MOVW R30,R18
                 _0x2080001:
0002f3 940e 0383 	CALL __LOADLOCR4
0002f5 962a      	ADIW R28,10
0002f6 90ff      	POP  R15
0002f7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002f8 93ba      	ST   -Y,R27
0002f9 93aa      	ST   -Y,R26
0002fa 91a9          ld   r26,y+
0002fb 91b9          ld   r27,y+
0002fc 27ee          clr  r30
0002fd 27ff          clr  r31
                 strlen0:
0002fe 916d          ld   r22,x+
0002ff 2366          tst  r22
000300 f011          breq strlen1
000301 9631          adiw r30,1
000302 cffb          rjmp strlen0
                 strlen1:
000303 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000304 93ba      	ST   -Y,R27
000305 93aa      	ST   -Y,R26
000306 27aa          clr  r26
000307 27bb          clr  r27
000308 91e9          ld   r30,y+
000309 91f9          ld   r31,y+
                 strlenf0:
00030a 9005      	lpm  r0,z+
00030b 2000          tst  r0
00030c f011          breq strlenf1
00030d 9611          adiw r26,1
00030e cffb          rjmp strlenf0
                 strlenf1:
00030f 01fd          movw r30,r26
000310 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000311 e0aa      	LDI  R26,LOW(10)
000312 e0b0      	LDI  R27,0
000313 940c 0356 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000315 e0f0      	LDI  R31,0
000316 01de      	MOVW R26,R28
000317 9650      	ADIW R26,16
000318 0fae      	ADD  R26,R30
000319 1fbf      	ADC  R27,R31
00031a 91ec      	LD   R30,X
00031b bbeb      	OUT  0x1B,R30
00031c cff4      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00031d 940e 00d8 	CALL __lcd_write_data
00031f e0a3      	LDI  R26,LOW(3)
000320 e0b0      	LDI  R27,0
000321 940c 0356 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000323 e3a0      	LDI  R26,LOW(48)
000324 940e 00c4 	CALL __lcd_write_nibble_G100
                +
000326 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
00032a 932a      	ST   -Y,R18
00032b 85ad      	LDD  R26,Y+13
00032c 85be      	LDD  R27,Y+13+1
00032d 85ef      	LDD  R30,Y+15
00032e 89f8      	LDD  R31,Y+15+1
00032f 9509      	ICALL
000330 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000331 89e8      	LDD  R30,Y+16
000332 89f9      	LDD  R31,Y+16+1
000333 9734      	SBIW R30,4
000334 8be8      	STD  Y+16,R30
000335 8bf9      	STD  Y+16+1,R31
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000337 85ad      	LDD  R26,Y+13
000338 85be      	LDD  R27,Y+13+1
000339 85ef      	LDD  R30,Y+15
00033a 89f8      	LDD  R31,Y+15+1
00033b 9509      	ICALL
00033c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
00033d 89a8      	LDD  R26,Y+16
00033e 89b9      	LDD  R27,Y+16+1
00033f 9614      	ADIW R26,4
000340 940e 036d 	CALL __GETW1P
000342 83ee      	STD  Y+6,R30
000343 83ff      	STD  Y+6+1,R31
000344 81ae      	LDD  R26,Y+6
000345 81bf      	LDD  R27,Y+6+1
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000347 89a8      	LDD  R26,Y+16
000348 89b9      	LDD  R27,Y+16+1
000349 9614      	ADIW R26,4
00034a 940e 036d 	CALL __GETW1P
00034c 87ea      	STD  Y+10,R30
00034d 87fb      	STD  Y+10+1,R31
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00034f 01de      	MOVW R26,R28
000350 961c      	ADIW R26,12
000351 940e 0360 	CALL __ADDW2R15
000353 940e 036d 	CALL __GETW1P
000355 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000356 9610      	adiw r26,0
000357 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000358 ef8a     +LDI R24 , LOW ( 0xFA )
000359 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00035a 9701     +SBIW R24 , 1
00035b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00035c 95a8      	wdr
00035d 9711      	sbiw r26,1
00035e f7c9      	brne __delay_ms0
                 __delay_ms1:
00035f 9508      	ret
                 
                 __ADDW2R15:
000360 2400      	CLR  R0
000361 0daf      	ADD  R26,R15
000362 1db0      	ADC  R27,R0
000363 9508      	RET
                 
                 __ANEGW1:
000364 95f1      	NEG  R31
000365 95e1      	NEG  R30
000366 40f0      	SBCI R31,0
000367 9508      	RET
                 
                 __CWD1:
000368 2f6f      	MOV  R22,R31
000369 0f66      	ADD  R22,R22
00036a 0b66      	SBC  R22,R22
00036b 2f76      	MOV  R23,R22
00036c 9508      	RET
                 
                 __GETW1P:
00036d 91ed      	LD   R30,X+
00036e 91fc      	LD   R31,X
00036f 9711      	SBIW R26,1
000370 9508      	RET
                 
                 __GETW1PF:
000371 9005      	LPM  R0,Z+
000372 91f4      	LPM  R31,Z
000373 2de0      	MOV  R30,R0
000374 9508      	RET
                 
                 __PUTPARD1:
000375 937a      	ST   -Y,R23
000376 936a      	ST   -Y,R22
000377 93fa      	ST   -Y,R31
000378 93ea      	ST   -Y,R30
000379 9508      	RET
                 
                 __SAVELOCR6:
00037a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00037b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00037c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00037d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00037e 931a      	ST   -Y,R17
00037f 930a      	ST   -Y,R16
000380 9508      	RET
                 
                 __LOADLOCR6:
000381 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000382 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000383 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000384 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000385 8119      	LDD  R17,Y+1
000386 8108      	LD   R16,Y
000387 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000388 0fac      	ADD  R26,R28
000389 1fbd      	ADC  R27,R29
                 __INITLOC0:
00038a 9005      	LPM  R0,Z+
00038b 920d      	ST   X+,R0
00038c 958a      	DEC  R24
00038d f7e1      	BRNE __INITLOC0
00038e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  15 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  40 r17:  30 r18:  29 r19:  11 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  25 r25:   3 r26: 107 r27:  41 r28:  19 r29:   2 r30: 174 r31:  62 
x  :  25 y  : 166 z  :  16 
Registers used: 25 out of 35 (71.4%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   8 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  54 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  36 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  26 ldd   :  77 ldi   :  97 
lds   :   0 lpm   :  15 lsl   :   0 lsr   :   0 mov   :  22 movw  :  20 
mul   :   2 muls  :   1 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  19 pop   :   1 push  :   1 rcall :  17 ret   :  26 
reti  :   0 rjmp  :  63 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  60 std   :  31 sts   :   2 sub   :   1 subi  :  19 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00071e   1772     50   1822   32768   5.6%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
